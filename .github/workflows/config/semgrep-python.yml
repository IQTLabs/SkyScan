rules:
- id: nan-injection
  languages:
  - python
  message: Found user input going directly into typecast for bool(), float(), or complex().
    This allows an attacker to inject Python's not-a-number (NaN) into the typecast.
    This results in undefind behavior, particularly when doing comparisons. Either
    cast to a different type, or add a guard checking for all capitalizations of the
    string 'nan'.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    impact: MEDIUM
    likelihood: MEDIUM
    references:
    - https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868
    - https://blog.bitdiscovery.com/2021/12/python-nan-injection/
    subcategory:
    - vuln
    technology:
    - django
  mode: taint
  pattern-sanitizers:
  - not_conflicting: true
    pattern: $ANYTHING(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: float(...)
      - pattern: bool(...)
      - pattern: complex(...)
    - pattern-not-inside: "if $COND:\n  ...\n...\n"
  pattern-sources:
  - patterns:
    - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
    - pattern-either:
      - pattern: request.$PROPERTY.get(...)
      - pattern: request.$PROPERTY[...]
  severity: ERROR
- id: extends-custom-expression
  languages:
  - python
  message: 'Found extension of custom expression: $CLASS. Extending expressions in
    this way could inadvertently lead to a SQL injection vulnerability, which can
    result in attackers exfiltrating sensitive data. Instead, ensure no user input
    enters this function or that user input is properly sanitized.'
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    subcategory:
    - audit
    technology:
    - django
  pattern-either:
  - pattern: "class $CLASS(..., django.db.models.Func, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Func, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Expression, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Expression, ...):\n \
      \   ...\n"
  - pattern: "class $CLASS(..., django.db.models.Value, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Value, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.DurationValue, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.DurationValue, ...):\n\
      \    ...\n"
  - pattern: "class $CLASS(..., django.db.models.RawSQL, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.RawSQL, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Star, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Star, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Random, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Random, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Col, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Col, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Ref, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Ref, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.ExpressionList, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.ExpressionList, ...):\n\
      \    ...\n"
  - pattern: "class $CLASS(..., django.db.models.ExpressionWrapper, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.ExpressionWrapper, ...):\n\
      \    ...\n"
  - pattern: "class $CLASS(..., django.db.models.When, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.When, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Case, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Case, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Subquery, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Subquery, ...):\n   \
      \ ...\n"
  - pattern: "class $CLASS(..., django.db.models.Exists, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Exists, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.Window, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.Window, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.WindowFrame, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.WindowFrame, ...):\n\
      \    ...\n"
  - pattern: "class $CLASS(..., django.db.models.RowRange, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.RowRange, ...):\n   \
      \ ...\n"
  - pattern: "class $CLASS(..., django.db.models.ValueRange, ...):\n    ...\n"
  - pattern: "class $CLASS(..., django.db.models.expressions.ValueRange, ...):\n \
      \   ...\n"
  severity: WARNING
- fix: "if django.contrib.auth.password_validation.validate_password($X, user=$MODEL):\n\
    \        $MODEL.set_password($X)\n"
  id: unvalidated-password
  languages:
  - python
  message: The password on '$MODEL' is being set without validating the password.
    Call django.contrib.auth.password_validation.validate_password() with validation
    functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/
    for more information.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-521: Weak Password Requirements'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern-not-inside: "if <... django.contrib.auth.password_validation.validate_password(...)\
      \ ...>:\n    ...\n"
  - pattern-not-inside: "django.contrib.auth.password_validation.validate_password(...)\n\
      ...\n"
  - pattern-not-inside: "try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n\
      \  ...\nexcept $EX:\n  ...\n...\n"
  - pattern-not-inside: "try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n\
      \  ...\nexcept $EX as $E:\n  ...\n...\n"
  - pattern-not: UserModel().set_password($X)
  - pattern: $MODEL.set_password($X)
  severity: WARNING
- id: avoid-query-set-extra
  languages:
  - python
  message: QuerySet.extra' does not provide safeguards against SQL injection and requires
    very careful use. SQL injection can lead to critical data being stolen by attackers.
    Instead of using '.extra', use the Django ORM and parameterized queries such as
    `People.objects.get(name='Bob')`.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern: $MODEL.extra(...)
  - pattern-not-inside: '$MODEL.extra(select = {$KEY: "..."})'
  severity: WARNING
- id: avoid-insecure-deserialization
  languages:
  - python
  message: Avoid using insecure deserialization library, backed by `pickle`, `_pickle`,
    `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code
    execution vulnerabilities.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.python.org/3/library/pickle.html
    subcategory:
    - vuln
    technology:
    - django
  mode: taint
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: "pickle.$PICKLEFUNC(...)\n"
        - pattern: "_pickle.$PICKLEFUNC(...)\n"
        - pattern: "cPickle.$PICKLEFUNC(...)\n"
        - pattern: "shelve.$PICKLEFUNC(...)\n"
      - metavariable-regex:
          metavariable: $PICKLEFUNC
          regex: dumps|dump|load|loads
    - patterns:
      - pattern: dill.$DILLFUNC(...)
      - metavariable-regex:
          metavariable: $DILLFUNC
          regex: dump|dump_session|dumps|load|load_session|loads
    - patterns:
      - pattern: yaml.$YAMLFUNC(...)
      - pattern-not: yaml.$YAMLFUNC(..., Dumper=SafeDumper, ...)
      - pattern-not: yaml.$YAMLFUNC(..., Dumper=yaml.SafeDumper, ...)
      - pattern-not: yaml.$YAMLFUNC(..., Loader=SafeLoader, ...)
      - pattern-not: yaml.$YAMLFUNC(..., Loader=yaml.SafeLoader, ...)
      - metavariable-regex:
          metavariable: $YAMLFUNC
          regex: dump|dump_all|load|load_all
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: "def $INSIDE(..., $PARAM, ...):\n  ...\n"
      - pattern-either:
        - pattern: request.$REQFUNC(...)
        - pattern: request.$REQFUNC.get(...)
        - pattern: request.$REQFUNC[...]
  severity: ERROR
- id: custom-expression-as-sql
  languages:
  - python
  message: Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This
    could lead to SQL injection, which can result in attackers exfiltrating sensitive
    data. Instead, ensure no user input enters this function or that user input is
    properly sanitized.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    subcategory:
    - audit
    technology:
    - django
  pattern: $EXPRESSION.as_sql(...)
  severity: WARNING
- id: avoid-raw-sql
  languages:
  - python
  message: "Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized\
    \ SQL query. This could lead to a SQL injection and therefore protected information\
    \ could be leaked. Instead, use Django ORM and parameterized queries before raw\
    \ SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`"
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern-either:
    - pattern: $MODEL.objects.raw($QUERY, ...)
    - pattern: django.db.models.expressions.RawSQL(...)
  - pattern-not: $MODEL.objects.raw("...")
  - pattern-not: django.db.models.expressions.RawSQL("...")
  severity: WARNING
- id: debug-template-tag
  languages:
  - generic
  message: Detected a debug template tag in a Django template. This dumps debugging
    information to the page when debug mode is enabled. Showing debug information
    to users is dangerous because it may reveal information about your environment
    that malicious actors can use to gain access to the system. Remove the debug tag.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-489: Active Debug Code'
    impact: MEDIUM
    likelihood: LOW
    owasp: A06:2017 - Security Misconfiguration
    references:
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#debug
    - https://stackoverflow.com/questions/2213977/django-debug-display-all-variables-of-a-page
    subcategory:
    - audit
    technology:
    - django
  pattern: '{% debug %}'
  severity: WARNING
- id: html-magic-method
  languages:
  - python
  message: The `__html__` method indicates to the Django template engine that the
    value is 'safe' for rendering. This means that normal HTML escaping will not be
    applied to the return value. This exposes your application to cross-site scripting
    (XSS) vulnerabilities. If you need to render raw HTML, consider instead using
    `mark_safe()` which more clearly marks the intent to render raw HTML than a class
    with a magic method.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape
    - https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern-inside: "class $CLASS(...):\n  ...\n"
  - pattern: "def __html__(...):\n  ...\n"
  severity: WARNING
- id: formathtml-fstring-parameter
  languages:
  - python
  message: Passing a formatted string as first parameter to `format_html` disables
    the proper encoding of variables. Any HTML in the first parameter is not encoded.
    Using a formatted string as first parameter obscures which parameters are encoded.
    Correct use of `format_html` is passing a static format string as first parameter,
    and the variables to substitute as subsequent parameters.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html
    subcategory:
    - audit
    technology:
    - django
  pattern-either:
  - pattern: format_html(<... f"..." ...>, ...)
  - pattern: format_html("..." % ..., ...)
  - pattern: format_html("...".format(...), ...)
  severity: WARNING
- id: class-extends-safestring
  languages:
  - python
  message: Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes
    are for bypassing the escaping engine built in to Django and should not be used
    directly. Improper use of this class exposes your application to cross-site scripting
    (XSS) vulnerabilities. If you need this functionality, use 'mark_safe' instead
    and ensure no user data can reach it.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping
    - https://github.com/django/django/blob/f138e75910b1e541686c4dce3d8f467f6fc234cb/django/utils/safestring.py#L11
    subcategory:
    - audit
    technology:
    - django
  pattern-either:
  - pattern: "class $CLASS(django.utils.safestring.SafeString):\n  ...\n"
  - pattern: "class $CLASS(django.utils.safestring.SafeText):\n  ...\n"
  - pattern: "class $CLASS(django.utils.safestring.SafeData):\n  ..."
  severity: WARNING
- id: template-var-unescaped-with-safeseq
  languages:
  - regex
  message: Detected a template variable where autoescaping is explicitly disabled
    with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure
    no user data is rendered here, otherwise this is a cross-site scripting (XSS)
    vulnerability. If you must do this, use `mark_safe` in your Python code.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq
    subcategory:
    - audit
    technology:
    - django
  paths:
    include:
    - '*.html'
  pattern-regex: '{{.*?\|\s+safeseq(\s+}})?'
  severity: WARNING
- id: template-href-var
  languages:
  - generic
  message: Detected a template variable used in an anchor tag with the 'href' attribute.
    This allows a malicious actor to input the 'javascript:' URI and is subject to
    cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate
    a URL. You may also consider setting the Content Security Policy (CSP) header.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url
    - https://content-security-policy.com/
    subcategory:
    - audit
    technology:
    - django
  paths:
    include:
    - '*.html'
  patterns:
  - pattern-inside: <a ...>
  - pattern-either:
    - pattern: href = '{{...}}'
    - pattern: href = "{{...}}"
    - pattern: href = {{...}}
  severity: WARNING
- id: var-in-script-tag
  languages:
  - generic
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For
    Django, you may also consider using the 'json_script' template tag and retrieving
    the data in your script by using the element ID (e.g., `document.getElementById`).
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    subcategory:
    - audit
    technology:
    - django
  paths:
    include:
    - '*.html'
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern: '{{ ... }}'
  - pattern-not-inside: nonce = '...'
  - pattern-not-inside: nonce = "..."
  severity: ERROR
- fix: "True\n"
  id: global-autoescape-off
  languages:
  - python
  message: "Autoescape is globally disbaled for this Django application. If you are\
    \ rendering any web pages, this exposes your application to cross-site scripting\
    \ (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern: "{..., 'BACKEND': ..., 'OPTIONS': {..., 'autoescape': $FALSE, ...}, ...}\n"
  - metavariable-pattern:
      metavariable: $FALSE
      pattern: "False\n"
  - focus-metavariable: $FALSE
  severity: WARNING
- fix: "True\n"
  id: context-autoescape-off
  languages:
  - python
  message: "Detected a Context with autoescape disabled. If you are rendering any\
    \ web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities.\
    \ Remove 'autoescape: False' or set it to 'True'."
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern-either:
    - pattern: "{..., \"autoescape\": $FALSE, ...}\n"
    - pattern: "$D[\"autoescape\"] = $FALSE\n"
  - metavariable-pattern:
      metavariable: $FALSE
      pattern: "False\n"
  - focus-metavariable: $FALSE
  severity: WARNING
- id: template-autoescape-off
  languages:
  - regex
  message: Detected a template block where autoescaping is explicitly disabled with
    '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn
    autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider
    instead, using `mark_safe` in Python code.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape
    subcategory:
    - audit
    technology:
    - django
  paths:
    include:
    - '*.html'
  pattern-regex: '{%\s+autoescape\s+off\s+%}'
  severity: WARNING
- id: missing-throttle-config
  languages:
  - python
  message: Django REST framework configuration is missing default rate- limiting options.
    This could inadvertently allow resource starvation or Denial of Service (DoS)
    attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting
    to your application.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-400: Uncontrolled Resource Consumption'
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    references:
    - https://www.django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern-not-inside: "REST_FRAMEWORK = {\n  ...,\n  \"DEFAULT_THROTTLE_RATES\"\
      : ...\n}\n"
  - pattern-inside: "REST_FRAMEWORK = ...\n"
  - pattern: REST_FRAMEWORK
  severity: WARNING
- id: password-empty-string
  languages:
  - python
  message: "'$VAR' is the empty string and is being used to set the password on '$MODEL'.\
    \ If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'."
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-521: Weak Password Requirements'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-either:
    - pattern: "$MODEL.set_password($EMPTY)\n...\n$MODEL.save()\n"
    - pattern: "$VAR = $EMPTY\n...\n$MODEL.set_password($VAR)\n...\n$MODEL.save()\n"
  - metavariable-regex:
      metavariable: $EMPTY
      regex: (\'\'|\"\")
  severity: ERROR
- id: csv-writer-injection
  languages:
  - python
  message: Detected user input into a generated CSV file using the built-in `csv`
    module. If user data is used to generate the data in this file, it is possible
    that an attacker could inject a formula when the CSV is imported into a spreadsheet
    application that runs an attacker script, which could steal data from the importing
    user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in
    replacement with the same API that will attempt to mitigate formula injection
    attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-1236: Improper Neutralization of Formula Elements in a CSV File'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/raphaelm/defusedcsv
    - https://owasp.org/www-community/attacks/CSV_Injection
    - https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities
    subcategory:
    - vuln
    technology:
    - django
    - python
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-inside: "$WRITER = csv.writer(...)\n\n...\n\n$WRITER.$WRITE(...)\n"
    - pattern: $WRITER.$WRITE(...)
    - metavariable-regex:
        metavariable: $WRITE
        regex: ^(writerow|writerows|writeheader)$
  pattern-sources:
  - patterns:
    - pattern-inside: "def $FUNC(..., $REQUEST, ...):\n  ...\n"
    - focus-metavariable: $REQUEST
    - metavariable-pattern:
        metavariable: $REQUEST
        patterns:
        - pattern: request
        - pattern-not-inside: request.build_absolute_uri
  severity: ERROR
- id: tainted-sql-string
  languages:
  - python
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using the Django object-relational mappers (ORM)
    instead of raw SQL queries.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    impact: LOW
    likelihood: MEDIUM
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
    subcategory:
    - audit
    technology:
    - django
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "\"$SQLSTR\" + ...\n"
      - pattern: "\"$SQLSTR\" % ...\n"
      - pattern: "\"$SQLSTR\".format(...)\n"
      - pattern: "f\"$SQLSTR{...}...\"\n"
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*
  pattern-sources:
  - patterns:
    - pattern: request.$ANYTHING
    - pattern-not: request.build_absolute_uri
  severity: ERROR
- id: ssrf-injection-urllib
  languages:
  - python
  message: Data from request object is passed to a new server-side request. This could
    lead to a server-side request forgery (SSRF), which could result in attackers
    gaining access to private organization data. To mitigate, ensure that schemes
    and hosts are validated against an allowlist, do not forward the response to the
    user, and ensure proper authentication and transport-layer security in the proxied
    request.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n"
  - pattern-either:
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W.get(...), ...),
        ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W.get(...), ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W.get(...)}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA,\
        \ ...)\n...\nurllib.request.urlopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR\
        \ % $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., f\"\
        ...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        urllib.request.urlopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nurllib.request.urlopen(..., $STR\
        \ + $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: return urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W(...), ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W(...)}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nurllib.request.urlopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR % $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        urllib.request.urlopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nurllib.request.urlopen(..., $STR + $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: return urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W[...], ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W[...]}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nurllib.request.urlopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR % $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        urllib.request.urlopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nurllib.request.urlopen(..., $STR + $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: return urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W, ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W, ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W, ...)
    - pattern: "$DATA = request.$W\n...\nurllib.request.urlopen(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nurllib.request.urlopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR % $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nurllib.request.urlopen(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nurllib.request.urlopen(..., $STR + $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nurllib.request.urlopen(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = urllib.request.urlopen(..., request.$W, ...)
    - pattern: return urllib.request.urlopen(..., request.$W, ...)
  severity: ERROR
- id: globals-misuse-code-execution
  languages:
  - python
  message: Found request data as an index to 'globals()'. This is extremely dangerous
    because it allows an attacker to execute arbitrary code on the system. Refactor
    your code not to use 'globals()'.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static\
      \ Code Injection')"
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n"
  - pattern-either:
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get($DATA, ...)\n\
        ...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get(\"...\"\
        \ % $DATA, ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get(f\"...{$DATA}...\"\
        , ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals().get(\"...\"\
        .format(..., $DATA, ...), ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[$DATA]\n...\n\
        $INTERM(...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[\"...\" % $DATA]\n\
        ...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[f\"...{$DATA}...\"\
        ]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = globals()[\"...\".format(...,\
        \ $DATA, ...)]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals().get($DATA, ...)\n\
        ...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals().get(\"...\" % $DATA,\
        \ ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals().get(f\"...{$DATA}...\"\
        , ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals().get(\"...\".format(...,\
        \ $DATA, ...), ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals()[$DATA]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals()[\"...\" % $DATA]\n\
        ...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals()[f\"...{$DATA}...\"\
        ]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = globals()[\"...\".format(...,\
        \ $DATA, ...)]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals().get($DATA, ...)\n\
        ...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals().get(\"...\" % $DATA,\
        \ ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals().get(f\"...{$DATA}...\"\
        , ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals().get(\"...\".format(...,\
        \ $DATA, ...), ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals()[$DATA]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals()[\"...\" % $DATA]\n\
        ...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals()[f\"...{$DATA}...\"\
        ]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = globals()[\"...\".format(...,\
        \ $DATA, ...)]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals().get($DATA, ...)\n...\n\
        $INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals().get(\"...\" % $DATA,\
        \ ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals().get(f\"...{$DATA}...\"\
        , ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals().get(\"...\".format(...,\
        \ $DATA, ...), ...)\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals()[$DATA]\n...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals()[\"...\" % $DATA]\n...\n\
        $INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals()[f\"...{$DATA}...\"]\n\
        ...\n$INTERM(...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = globals()[\"...\".format(..., $DATA,\
        \ ...)]\n...\n$INTERM(...)\n"
  severity: WARNING
- id: user-exec-format-string
  languages:
  - python
  message: Found user data in a call to 'exec'. This is extremely dangerous because
    it can enable an attacker to execute arbitrary remote code on the system. Instead,
    refactor your code to not use 'eval' and instead use a safe library for the specific
    functionality you need.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Code_Injection
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $F(...):\n  ...\n"
  - pattern-either:
    - pattern: exec(..., $STR % request.$W.get(...), ...)
    - pattern: "$V = request.$W.get(...)\n...\nexec(..., $STR % $V, ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\n$S = $STR % $V\n...\nexec(..., $S,\
        \ ...)\n"
    - pattern: exec(..., "..." % request.$W(...), ...)
    - pattern: "$V = request.$W(...)\n...\nexec(..., $STR % $V, ...)\n"
    - pattern: "$V = request.$W(...)\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
    - pattern: exec(..., $STR % request.$W[...], ...)
    - pattern: "$V = request.$W[...]\n...\nexec(..., $STR % $V, ...)\n"
    - pattern: "$V = request.$W[...]\n...\n$S = $STR % $V\n...\nexec(..., $S, ...)\n"
    - pattern: exec(..., $STR.format(..., request.$W.get(...), ...), ...)
    - pattern: "$V = request.$W.get(...)\n...\nexec(..., $STR.format(..., $V, ...),\
        \ ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\n$S = $STR.format(..., $V, ...)\n...\n\
        exec(..., $S, ...)\n"
    - pattern: exec(..., $STR.format(..., request.$W(...), ...), ...)
    - pattern: "$V = request.$W(...)\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
    - pattern: "$V = request.$W(...)\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(...,\
        \ $S, ...)\n"
    - pattern: exec(..., $STR.format(..., request.$W[...], ...), ...)
    - pattern: "$V = request.$W[...]\n...\nexec(..., $STR.format(..., $V, ...), ...)\n"
    - pattern: "$V = request.$W[...]\n...\n$S = $STR.format(..., $V, ...)\n...\nexec(...,\
        \ $S, ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\nexec(..., f\"...{$V}...\", ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\n$S = f\"...{$V}...\"\n...\nexec(...,\
        \ $S, ...)\n"
    - pattern: "$V = request.$W(...)\n...\nexec(..., f\"...{$V}...\", ...)\n"
    - pattern: "$V = request.$W(...)\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S,\
        \ ...)\n"
    - pattern: "$V = request.$W[...]\n...\nexec(..., f\"...{$V}...\", ...)\n"
    - pattern: "$V = request.$W[...]\n...\n$S = f\"...{$V}...\"\n...\nexec(..., $S,\
        \ ...)\n"
    - pattern: exec(..., base64.decodestring($S.format(..., request.$W.get(...), ...),
        ...), ...)
    - pattern: exec(..., base64.decodestring($S % request.$W.get(...), ...), ...)
    - pattern: exec(..., base64.decodestring(f"...{request.$W.get(...)}...", ...),
        ...)
    - pattern: exec(..., base64.decodestring(request.$W.get(...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes($S.format(..., request.$W.get(...),
        ...), ...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes($S % request.$W.get(...), ...),
        ...), ...)
    - pattern: exec(..., base64.decodestring(bytes(f"...{request.$W.get(...)}...",
        ...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes(request.$W.get(...), ...), ...),
        ...)
    - pattern: "$DATA = request.$W.get(...)\n...\nexec(..., base64.decodestring($DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = base64.decodestring($DATA,\
        \ ...)\n...\nexec(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nexec(..., base64.decodestring(bytes($DATA,\
        \ ...), ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = base64.decodestring(bytes($DATA,\
        \ ...), ...)\n...\nexec(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nexec(..., base64.decodestring($DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = base64.decodestring($DATA,\
        \ ...)\n...\nexec(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nexec(..., base64.decodestring(bytes($DATA,\
        \ ...), ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = base64.decodestring(bytes($DATA,\
        \ ...), ...)\n...\nexec(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nexec(..., base64.decodestring($DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = base64.decodestring($DATA,\
        \ ...)\n...\nexec(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nexec(..., base64.decodestring(bytes($DATA,\
        \ ...), ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = base64.decodestring(bytes($DATA,\
        \ ...), ...)\n...\nexec(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nexec(..., base64.decodestring($DATA, ...),\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = base64.decodestring($DATA, ...)\n\
        ...\nexec(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nexec(..., base64.decodestring(bytes($DATA,\
        \ ...), ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = base64.decodestring(bytes($DATA,\
        \ ...), ...)\n...\nexec(..., $INTERM, ...)\n"
  severity: WARNING
- id: user-eval-format-string
  languages:
  - python
  message: Found user data in a call to 'eval'. This is extremely dangerous because
    it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection
    for more information.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $F(...):\n  ...\n"
  - pattern-either:
    - pattern: eval(..., $STR % request.$W.get(...), ...)
    - pattern: "$V = request.$W.get(...)\n...\neval(..., $STR % $V, ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\n$S = $STR % $V\n...\neval(..., $S,\
        \ ...)\n"
    - pattern: eval(..., "..." % request.$W(...), ...)
    - pattern: "$V = request.$W(...)\n...\neval(..., $STR % $V, ...)\n"
    - pattern: "$V = request.$W(...)\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
    - pattern: eval(..., $STR % request.$W[...], ...)
    - pattern: "$V = request.$W[...]\n...\neval(..., $STR % $V, ...)\n"
    - pattern: "$V = request.$W[...]\n...\n$S = $STR % $V\n...\neval(..., $S, ...)\n"
    - pattern: eval(..., $STR.format(..., request.$W.get(...), ...), ...)
    - pattern: "$V = request.$W.get(...)\n...\neval(..., $STR.format(..., $V, ...),\
        \ ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\n$S = $STR.format(..., $V, ...)\n...\n\
        eval(..., $S, ...)\n"
    - pattern: eval(..., $STR.format(..., request.$W(...), ...), ...)
    - pattern: "$V = request.$W(...)\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
    - pattern: "$V = request.$W(...)\n...\n$S = $STR.format(..., $V, ...)\n...\neval(...,\
        \ $S, ...)\n"
    - pattern: eval(..., $STR.format(..., request.$W[...], ...), ...)
    - pattern: "$V = request.$W[...]\n...\neval(..., $STR.format(..., $V, ...), ...)\n"
    - pattern: "$V = request.$W[...]\n...\n$S = $STR.format(..., $V, ...)\n...\neval(...,\
        \ $S, ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\neval(..., f\"...{$V}...\", ...)\n"
    - pattern: "$V = request.$W.get(...)\n...\n$S = f\"...{$V}...\"\n...\neval(...,\
        \ $S, ...)\n"
    - pattern: "$V = request.$W(...)\n...\neval(..., f\"...{$V}...\", ...)\n"
    - pattern: "$V = request.$W(...)\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S,\
        \ ...)\n"
    - pattern: "$V = request.$W[...]\n...\neval(..., f\"...{$V}...\", ...)\n"
    - pattern: "$V = request.$W[...]\n...\n$S = f\"...{$V}...\"\n...\neval(..., $S,\
        \ ...)\n"
  severity: WARNING
- id: user-exec
  languages:
  - python
  message: Found user data in a call to 'exec'. This is extremely dangerous because
    it can enable an attacker to execute arbitrary remote code on the system. Instead,
    refactor your code to not use 'eval' and instead use a safe library for the specific
    functionality you need.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Code_Injection
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $F(...):\n  ...\n"
  - pattern-either:
    - pattern: exec(..., request.$W.get(...), ...)
    - pattern: "$V = request.$W.get(...)\n...\nexec(..., $V, ...)\n"
    - pattern: exec(..., request.$W(...), ...)
    - pattern: "$V = request.$W(...)\n...\nexec(..., $V, ...)\n"
    - pattern: exec(..., request.$W[...], ...)
    - pattern: "$V = request.$W[...]\n...\nexec(..., $V, ...)\n"
    - pattern: "loop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None,\
        \ exec, request.$W[...])\n"
    - pattern: "$V = request.$W[...]\n...\nloop = asyncio.get_running_loop()\n...\n\
        await loop.run_in_executor(None, exec, $V)\n"
    - pattern: "loop = asyncio.get_running_loop()\n...\nawait loop.run_in_executor(None,\
        \ exec, request.$W.get(...))\n"
    - pattern: "$V = request.$W.get(...)\n...\nloop = asyncio.get_running_loop()\n\
        ...\nawait loop.run_in_executor(None, exec, $V)\n"
  severity: WARNING
- id: user-eval
  languages:
  - python
  message: Found user data in a call to 'eval'. This is extremely dangerous because
    it can enable an attacker to execute arbitrary remote code on the system. Instead,
    refactor your code to not use 'eval' and instead use a safe library for the specific
    functionality you need.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
    - https://owasp.org/www-community/attacks/Code_Injection
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $F(...):\n  ...\n"
  - pattern-either:
    - pattern: eval(..., request.$W.get(...), ...)
    - pattern: "$V = request.$W.get(...)\n...\neval(..., $V, ...)\n"
    - pattern: eval(..., request.$W(...), ...)
    - pattern: "$V = request.$W(...)\n...\neval(..., $V, ...)\n"
    - pattern: eval(..., request.$W[...], ...)
    - pattern: "$V = request.$W[...]\n...\neval(..., $V, ...)\n"
  severity: WARNING
- id: subprocess-injection
  languages:
  - python
  message: Detected user input entering a `subprocess` call unsafely. This could result
    in a command injection vulnerability. An attacker could use this vulnerability
    to execute arbitrary commands on the host, which allows them to download malware,
    scan sensitive data, or run any command they wish on the server. Do not let users
    choose the command to run. In general, prefer to use Python API versions of system
    commands. If you must use subprocess, use a dictionary to allowlist a set of commands.
  metadata:
    category: security
    confidence: HIGH
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    subcategory:
    - vuln
    technology:
    - flask
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sanitizers:
  - patterns:
    - pattern: $DICT[$KEY]
    - focus-metavariable: $KEY
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: subprocess.$FUNC(...)
        - pattern-not: subprocess.$FUNC("...", ...)
        - pattern-not: subprocess.$FUNC(["...", ...], ...)
        - pattern-not-inside: "$CMD = [\"...\", ...]\n...\nsubprocess.$FUNC($CMD,\
            \ ...)\n"
      - patterns:
        - pattern: subprocess.$FUNC(["$SHELL", "-c", ...], ...)
        - metavariable-regex:
            metavariable: $SHELL
            regex: ^(sh|bash|ksh|csh|tcsh|zsh)$
      - patterns:
        - pattern: subprocess.$FUNC(["$INTERPRETER", ...], ...)
        - metavariable-regex:
            metavariable: $INTERPRETER
            regex: ^(python|python\d)$
  pattern-sources:
  - patterns:
    - pattern-inside: "def $FUNC(..., $REQUEST, ...):\n  ...\n"
    - focus-metavariable: $REQUEST
    - metavariable-pattern:
        metavariable: $REQUEST
        patterns:
        - pattern: request
        - pattern-not-inside: request.build_absolute_uri
  severity: ERROR
- id: command-injection-os-system
  languages:
  - python
  message: Request data detected in os.system. This could be vulnerable to a command
    injection and should be avoided. If this must be done, use the 'subprocess' module
    instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection
    for more information.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n"
  - pattern-either:
    - pattern: os.system(..., request.$W.get(...), ...)
    - pattern: os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: os.system(..., $S % request.$W.get(...), ...)
    - pattern: os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: "$DATA = request.$W.get(...)\n...\nos.system(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nos.system(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA,\
        \ ...)\n...\nos.system(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nos.system(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nos.system(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        os.system(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nos.system(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = os.system(..., request.$W.get(...), ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $A = os.system(..., $S % request.$W.get(...), ...)
    - pattern: $A = os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: return os.system(..., request.$W.get(...), ...)
    - pattern: return os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: return os.system(..., $S % request.$W.get(...), ...)
    - pattern: return os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: os.system(..., request.$W(...), ...)
    - pattern: os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: os.system(..., $S % request.$W(...), ...)
    - pattern: os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: "$DATA = request.$W(...)\n...\nos.system(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nos.system(..., $STR.format(..., $DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nos.system(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nos.system(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        os.system(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\nos.system(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = os.system(..., request.$W(...), ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $A = os.system(..., $S % request.$W(...), ...)
    - pattern: $A = os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: return os.system(..., request.$W(...), ...)
    - pattern: return os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: return os.system(..., $S % request.$W(...), ...)
    - pattern: return os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: os.system(..., request.$W[...], ...)
    - pattern: os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: os.system(..., $S % request.$W[...], ...)
    - pattern: os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: "$DATA = request.$W[...]\n...\nos.system(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nos.system(..., $STR.format(..., $DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nos.system(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nos.system(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        os.system(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\nos.system(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = os.system(..., request.$W[...], ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $A = os.system(..., $S % request.$W[...], ...)
    - pattern: $A = os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: return os.system(..., request.$W[...], ...)
    - pattern: return os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: return os.system(..., $S % request.$W[...], ...)
    - pattern: return os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: os.system(..., request.$W, ...)
    - pattern: os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: os.system(..., $S % request.$W, ...)
    - pattern: os.system(..., f"...{request.$W}...", ...)
    - pattern: "$DATA = request.$W\n...\nos.system(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nos.system(..., $INTERM,\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\nos.system(..., $STR.format(..., $DATA, ...),\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nos.system(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nos.system(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nos.system(..., f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\nos.system(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nos.system(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = os.system(..., request.$W, ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: $A = os.system(..., $S % request.$W, ...)
    - pattern: $A = os.system(..., f"...{request.$W}...", ...)
    - pattern: return os.system(..., request.$W, ...)
    - pattern: return os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: return os.system(..., $S % request.$W, ...)
    - pattern: return os.system(..., f"...{request.$W}...", ...)
  severity: ERROR
- id: xss-html-email-body
  languages:
  - python
  message: Found request data in an EmailMessage that is set to use HTML. This is
    dangerous because HTML emails are susceptible to XSS. An attacker could inject
    data into this HTML email, causing XSS.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream\
      \ Component ('Injection')"
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://www.damonkohler.com/2008/12/email-injection.html
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n  $EMAIL.content_subtype = \"html\"\n\
      \  ...\n"
  - pattern-either:
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $B.$C(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n\
        ...\ndjango.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $B.$C(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n\
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $B.$C(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\n\
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)\n"
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W, ...)
    - pattern: "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $B.$C(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $B.$C(..., $DATA, ...)\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, $STR\
        \ % $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.core.mail.EmailMessage($SUBJ, f\"\
        ...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.core.mail.EmailMessage($SUBJ,\
        \ $INTERM, ...)\n"
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W, ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W, ...)
  severity: WARNING
- id: sql-injection-using-extra-where
  languages:
  - python
  message: User-controlled data from a request is passed to 'extra()'. This could
    lead to a SQL injection and therefore protected information could be leaked. Instead,
    use parameterized queries or escape the user-controlled data by using `params`
    and not using quote placeholders in the SQL string.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n"
  - pattern-either:
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W.get(...),
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W.get(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W.get(...)}...",
        ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR.format(..., $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA,\
        \ ...)\n...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR % $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ f\"...{$DATA}...\", ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR + $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...],
        ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W(...),
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W(...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W(...)}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR.format(..., $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR % $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ f\"...{$DATA}...\", ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR + $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W[...],
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W[...], ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W[...]}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR.format(..., $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR % $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[...,\
        \ f\"...{$DATA}...\", ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR + $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W[...], ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W, ...),
        ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W, ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $DATA,\
        \ ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR.format(...,\
        \ $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR\
        \ % $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., f\"\
        ...{$DATA}...\", ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR\
        \ + $DATA, ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.extra(...,\
        \ where=[..., $INTERM, ...], ...)\n"
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR % (..., $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR % (..., $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.extra(..., where=[...,\
        \ $STR % (..., $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.extra(..., where=[..., $STR\
        \ % (..., $DATA, ...), ...], ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\n$MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n\
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)\n"
  severity: WARNING
- id: sql-injection-using-raw
  languages:
  - python
  message: Data that is possible user-controlled from a python request is passed to
    `raw()`. This could lead to SQL injection and attackers gaining access to protected
    information. Instead, use django's QuerySets, which are built with query parameterization
    and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n"
  - pattern-either:
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W.get(...), ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W.get(...)}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA,\
        \ ...)\n...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR % $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        $MODEL.objects.raw(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw(..., $STR + $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: return $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W(...), ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W(...)}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR % $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        $MODEL.objects.raw(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.raw(..., $STR + $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: return $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W[...], ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W[...]}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR % $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        $MODEL.objects.raw(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.raw(..., $STR + $DATA,\
        \ ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: return $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W, ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W, ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W, ...)
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR.format(...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\n$MODEL.objects.raw(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.raw(..., f\"...{$DATA}...\"\
        , ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.raw(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\n$MODEL.objects.raw(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = $MODEL.objects.raw(..., request.$W, ...)
    - pattern: return $MODEL.objects.raw(..., request.$W, ...)
    - pattern: "$DATA = request.$W.get(...)\n...\n$MODEL.objects.raw($STR % (...,\
        \ $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$MODEL.objects.raw($STR % (..., $DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$MODEL.objects.raw($STR % (..., $DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\n$MODEL.objects.raw($STR % (..., $DATA, ...),\
        \ ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\n$MODEL.objects.raw($INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\n$MODEL.objects.raw($INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\n$MODEL.objects.raw($INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n\
        $MODEL.objects.raw($INTERM, ...)\n"
  severity: WARNING
- id: sql-injection-using-rawsql
  languages:
  - python
  message: User-controlled data from request is passed to 'RawSQL()'. This could lead
    to a SQL injection and therefore protected information could be leaked. Instead,
    use parameterized queries or escape the user-controlled data by using `params`
    and not using quote placeholders in the SQL string.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n"
  - pattern-either:
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W.get(...),
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR.format(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA,\
        \ ...)\n...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        django.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W.get(...),
        ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W.get(...),
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W(...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W(...)}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR.format(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        django.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W[...], ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W[...]}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR.format(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        django.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W, ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W}...", ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR.format(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\ndjango.db.models.expressions.RawSQL(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\ndjango.db.models.expressions.RawSQL(...,\
        \ $INTERM, ...)\n"
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: "$DATA = request.$W.get(...)\n...\ndjango.db.models.expressions.RawSQL($STR\
        \ % (..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\ndjango.db.models.expressions.RawSQL($STR\
        \ % (..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\ndjango.db.models.expressions.RawSQL($STR\
        \ % (..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\ndjango.db.models.expressions.RawSQL($STR\
        \ % (..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % (..., $DATA, ...)\n\
        ...\ndjango.db.models.expressions.RawSQL($INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % (..., $DATA, ...)\n...\n\
        django.db.models.expressions.RawSQL($INTERM, ...)\n"
  severity: WARNING
- id: path-traversal-join
  languages:
  - python
  message: Data from request is passed to os.path.join() and to open(). This is a
    path traversal vulnerability, which can lead to sensitive data being leaked. To
    mitigate, consider using os.path.abspath or os.path.realpath or Path library.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path\
      \ Traversal')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: LOW
    likelihood: LOW
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    subcategory:
    - audit
    technology:
    - django
  patterns:
  - pattern-inside: "def $F(...):\n  ...\n"
  - pattern-not-inside: "def $F(...):\n  ...\n  os.path.abspath(...)\n  ...\n"
  - pattern-not-inside: "def $F(...):\n  ...\n  os.path.realpath(...)\n  ...\n"
  - pattern-either:
    - pattern: open(os.path.join(..., request.$W.get(...), ...), ...)
    - pattern: open(os.path.join(..., request.$W(...), ...), ...)
    - pattern: open(os.path.join(..., request.$W, ...), ...)
    - pattern: open(os.path.join(..., request.$W[...], ...), ...)
    - pattern: "$P = os.path.join(..., request.$W.get(...), ...)\n...\nopen($P, ...)\n"
    - pattern: "$P = os.path.join(..., request.$W(...), ...)\n...\nopen($P, ...)\n"
    - pattern: "$P = os.path.join(..., request.$W, ...)\n...\nopen($P, ...)\n"
    - pattern: "$P = os.path.join(..., request.$W[...], ...)\n...\nopen($P, ...)\n"
    - pattern: "$V = request.$W.get($X)\n...\n$P = os.path.join(..., $V, ...)\n...\n\
        open($P, ...)\n"
    - pattern: "$V = request.$W($X)\n...\n$P = os.path.join(..., $V, ...)\n...\nopen($P,\
        \ ...)\n"
    - pattern: "$V = request.$W[$X]\n...\n$P = os.path.join(..., $V, ...)\n...\nopen($P,\
        \ ...)\n"
    - pattern: "$V = request.$W\n...\n$P = os.path.join(..., $V, ...)\n...\nopen($P,\
        \ ...)\n"
    - pattern: "$P = request.$W.get(...)\n...\nopen(os.path.join(..., $P, ...), ...)\n"
    - pattern: "$P = request.$W(...)\n...\nopen(os.path.join(..., $P, ...), ...)\n"
    - pattern: "$P = request.$W\n...\nopen(os.path.join(..., $P, ...), ...)\n"
    - pattern: "$P = request.$W[...]\n...\nopen(os.path.join(..., $P, ...), ...)\n"
  severity: WARNING
- id: path-traversal-open
  languages:
  - python
  message: Found request data in a call to 'open'. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks and therefore
    sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath
    or the pathlib library.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path\
      \ Traversal')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    subcategory:
    - vuln
    technology:
    - django
  patterns:
  - pattern-inside: "def $FUNC(...):\n  ...\n"
  - pattern-either:
    - pattern: open(..., request.$W.get(...), ...)
    - pattern: open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: open(..., $S % request.$W.get(...), ...)
    - pattern: open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: "$DATA = request.$W.get(...)\n...\nopen(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nopen(..., $STR.format(..., $DATA,\
        \ ...), ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA,\
        \ ...)\n...\nopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR.format(..., $DATA,\
        \ ...)\n...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nopen(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR % $DATA\n...\nwith\
        \ open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        open(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        with open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W.get(...)\n...\nopen(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W.get(...)\n...\n$INTERM = $STR + $DATA\n...\nwith\
        \ open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: $A = open(..., request.$W.get(...), ...)
    - pattern: $A = open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $A = open(..., $S % request.$W.get(...), ...)
    - pattern: $A = open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: return open(..., request.$W.get(...), ...)
    - pattern: return open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: return open(..., $S % request.$W.get(...), ...)
    - pattern: return open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: "$DATA = request.$W.get(...)\n...\nwith open(..., $DATA, ...) as $FD:\n\
        \  ...\n"
    - pattern: open(..., request.$W(...), ...)
    - pattern: open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: open(..., $S % request.$W(...), ...)
    - pattern: open(..., f"...{request.$W(...)}...", ...)
    - pattern: "$DATA = request.$W(...)\n...\nopen(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM,\
        \ ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W(...)\n...\nopen(..., $STR.format(..., $DATA, ...),\
        \ ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W(...)\n...\nopen(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR % $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W(...)\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        open(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        with open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W(...)\n...\nopen(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W(...)\n...\n$INTERM = $STR + $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: $A = open(..., request.$W(...), ...)
    - pattern: $A = open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $A = open(..., $S % request.$W(...), ...)
    - pattern: $A = open(..., f"...{request.$W(...)}...", ...)
    - pattern: return open(..., request.$W(...), ...)
    - pattern: return open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: return open(..., $S % request.$W(...), ...)
    - pattern: return open(..., f"...{request.$W(...)}...", ...)
    - pattern: "$DATA = request.$W(...)\n...\nwith open(..., $DATA, ...) as $FD:\n\
        \  ...\n"
    - pattern: open(..., request.$W[...], ...)
    - pattern: open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: open(..., $S % request.$W[...], ...)
    - pattern: open(..., f"...{request.$W[...]}...", ...)
    - pattern: "$DATA = request.$W[...]\n...\nopen(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM,\
        \ ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W[...]\n...\nopen(..., $STR.format(..., $DATA, ...),\
        \ ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W[...]\n...\nopen(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR % $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W[...]\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        open(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = f\"...{$DATA}...\"\n...\n\
        with open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W[...]\n...\nopen(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W[...]\n...\n$INTERM = $STR + $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: $A = open(..., request.$W[...], ...)
    - pattern: $A = open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $A = open(..., $S % request.$W[...], ...)
    - pattern: $A = open(..., f"...{request.$W[...]}...", ...)
    - pattern: return open(..., request.$W[...], ...)
    - pattern: return open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: return open(..., $S % request.$W[...], ...)
    - pattern: return open(..., f"...{request.$W[...]}...", ...)
    - pattern: "$DATA = request.$W[...]\n...\nwith open(..., $DATA, ...) as $FD:\n\
        \  ...\n"
    - pattern: open(..., request.$W, ...)
    - pattern: open(..., $S.format(..., request.$W, ...), ...)
    - pattern: open(..., $S % request.$W, ...)
    - pattern: open(..., f"...{request.$W}...", ...)
    - pattern: "$DATA = request.$W\n...\nopen(..., $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nopen(..., $INTERM,\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $DATA\n...\nwith open(..., $INTERM,\
        \ ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W\n...\nopen(..., $STR.format(..., $DATA, ...), ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nopen(..., $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR.format(..., $DATA, ...)\n\
        ...\nwith open(..., $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W\n...\nopen(..., $STR % $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nopen(..., $INTERM,\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR % $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W\n...\nopen(..., f\"...{$DATA}...\", ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nopen(...,\
        \ $INTERM, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = f\"...{$DATA}...\"\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: "$DATA = request.$W\n...\nopen(..., $STR + $DATA, ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nopen(..., $INTERM,\
        \ ...)\n"
    - pattern: "$DATA = request.$W\n...\n$INTERM = $STR + $DATA\n...\nwith open(...,\
        \ $INTERM, ...) as $FD:\n  ...\n"
    - pattern: $A = open(..., request.$W, ...)
    - pattern: $A = open(..., $S.format(..., request.$W, ...), ...)
    - pattern: $A = open(..., $S % request.$W, ...)
    - pattern: $A = open(..., f"...{request.$W}...", ...)
    - pattern: return open(..., request.$W, ...)
    - pattern: return open(..., $S.format(..., request.$W, ...), ...)
    - pattern: return open(..., $S % request.$W, ...)
    - pattern: return open(..., f"...{request.$W}...", ...)
    - pattern: "$DATA = request.$W\n...\nwith open(..., $DATA, ...) as $FD:\n  ...\n"
  severity: WARNING
- id: use-django-environ
  languages:
  - python
  message: You are using environment variables inside django app. Use `django-environ`
    as it a better alternative for deployment.
  metadata:
    category: best-practice
    technology:
    - django
  patterns:
  - pattern-not-inside: "import environ\n...\n"
  - pattern-either:
    - pattern: "import django\n...\nimport os\n...\n$FOO = $M.environ[...]\n"
    - pattern: "import os\n...\nimport django\n...\n$FOO = $M.environ[...]\n"
  severity: ERROR
- id: use-onetoonefield
  languages:
  - python
  message: Use 'django.db.models.OneToOneField' instead of 'ForeignKey' with unique=True.
    'OneToOneField' is used to create one-to-one relationships.
  metadata:
    category: best-practice
    technology:
    - django
  patterns:
  - pattern-inside: "class $M(...):\n  ...\n"
  - pattern: $F = django.db.models.ForeignKey(..., unique=True, ...)
  severity: WARNING
- id: use-decimalfield-for-money
  languages:
  - python
  message: Found a FloatField used for variable $F. Use DecimalField for currency
    fields to avoid float-rounding errors.
  metadata:
    category: correctness
    technology:
    - django
  patterns:
  - pattern-inside: "class $M(...):\n  ...\n"
  - pattern: $F = django.db.models.FloatField(...)
  - metavariable-regex:
      metavariable: $F
      regex: .*([pP][rR][iI][cC][eE]|[aA][mM][oO][uU][nN][tT]|[sS][uU][bB][tT][oO][tT][aA][lL]|[dD][oO][nN][aA][tT][iI][oO][nN]|[fF][eE][eE]|[sS][aA][lL][aA][rR][yY]|[pP][rR][eE][cC][iI][oO]).*
  severity: ERROR
- fix-regex:
    count: 1
    regex: http:\/\/
    replacement: https://
  id: no-auth-over-http
  languages:
  - python
  message: Authentication detected over HTTP. HTTP does not provide any encryption
    or protection for these authentication credentials. This may expose these credentials
    to unauthorized parties. Use 'https://' instead.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-523: Unprotected Transport of Credentials'
    impact: LOW
    likelihood: LOW
    owasp:
    - A02:2017 - Broken Authentication
    - A02:2021 - Cryptographic Failures
    references:
    - https://blog.r2c.dev/2020/bento-check-no-auth-over-http/
    - https://bento.dev/checks/requests/no-auth-over-http/
    source-rule-url: https://pypi.org/project/flake8-flask/
    subcategory:
    - audit
    technology:
    - requests
  pattern-either:
  - pattern: requests.$W("=~/http:\/\/.*/", ..., auth=$X, ...)
  - pattern: "$URL = \"=~/http:\\/\\/.../\"\n...\nrequests.$W($URL, ..., auth=$X,\
      \ ...)\n"
  severity: ERROR
- fix-regex:
    regex: verify(\s)*=(\s)*False
    replacement: verify=True
  id: disabled-cert-validation
  languages:
  - python
  message: Certificate verification has been explicitly disabled. This permits insecure
    connections to insecure servers. Re-enable certification validation.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib
    subcategory:
    - audit
    technology:
    - requests
  pattern-either:
  - pattern: requests.put(..., verify=False, ...)
  - pattern: requests.patch(..., verify=False, ...)
  - pattern: requests.delete(..., verify=False, ...)
  - pattern: requests.head(..., verify=False, ...)
  - pattern: requests.options(..., verify=False, ...)
  - pattern: requests.request(..., verify=False, ...)
  - pattern: requests.get(..., verify=False, ...)
  - pattern: requests.post(..., verify=False, ...)
  severity: ERROR
- fix: "True\n"
  id: require-encryption
  languages:
  - python
  message: Initializing a security context for Dask (`distributed`) without "require_encryption"
    keyword argument may silently fail to provide security.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters
    subcategory:
    - vuln
    technology:
    - distributed
  patterns:
  - pattern: "distributed.security.Security(..., require_encryption=$VAL, ...)\n"
  - metavariable-pattern:
      metavariable: $VAL
      pattern: "False\n"
  - focus-metavariable: $VAL
  severity: WARNING
- id: insecure-cipher-algorithm-rc4
  languages:
  - python
  message: Detected ARC4 cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    bandit-code: B304
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://cwe.mitre.org/data/definitions/326.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Cryptodome.Cipher.ARC4.new(...)
  - pattern: Crypto.Cipher.ARC4.new(...)
  severity: WARNING
- id: insecure-hash-algorithm-md2
  languages:
  - python
  message: Detected MD2 hash algorithm which is considered insecure. MD2 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Crypto.Hash.MD2.new(...)
  - pattern: Cryptodome.Hash.MD2.new (...)
  severity: WARNING
- id: insecure-hash-algorithm-md4
  languages:
  - python
  message: Detected MD4 hash algorithm which is considered insecure. MD4 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Crypto.Hash.MD4.new(...)
  - pattern: Cryptodome.Hash.MD4.new (...)
  severity: WARNING
- id: insecure-hash-algorithm-md5
  languages:
  - python
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Crypto.Hash.MD5.new(...)
  - pattern: Cryptodome.Hash.MD5.new (...)
  severity: WARNING
- id: insecure-hash-algorithm-sha1
  languages:
  - python
  message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic signature.
    Use SHA256 or SHA3 instead.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Crypto.Hash.SHA.new(...)
  - pattern: Cryptodome.Hash.SHA.new (...)
  severity: WARNING
- id: insecure-cipher-algorithm-xor
  languages:
  - python
  message: Detected XOR cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    bandit-code: B304
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Cryptodome.Cipher.XOR.new(...)
  - pattern: Crypto.Cipher.XOR.new(...)
  severity: WARNING
- id: insecure-cipher-algorithm-blowfish
  languages:
  - python
  message: Detected Blowfish cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    bandit-code: B304
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Cryptodome.Cipher.Blowfish.new(...)
  - pattern: Crypto.Cipher.Blowfish.new(...)
  severity: WARNING
- id: insecure-cipher-algorithm-rc2
  languages:
  - python
  message: Detected RC2 cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    bandit-code: B304
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://cwe.mitre.org/data/definitions/326.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    subcategory:
    - vuln
    technology:
    - pycryptodome
  pattern-either:
  - pattern: Cryptodome.Cipher.ARC2.new(...)
  - pattern: Crypto.Cipher.ARC2.new(...)
  severity: WARNING
- id: crypto-mode-without-authentication
  languages:
  - python
  message: 'An encryption mode of operation is being used without proper message authentication.
    This can potentially result in the encrypted content to be decrypted by an attacker.
    Consider instead use an AEAD mode of operation like GCM. '
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    technology:
    - cryptography
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: "AES.new(..., $PYCRYPTODOME_MODE)\n"
      - pattern-not-inside: "AES.new(..., $PYCRYPTODOME_MODE)\n...\nHMAC.new\n"
      - metavariable-pattern:
          metavariable: $PYCRYPTODOME_MODE
          patterns:
          - pattern-either:
            - pattern: AES.MODE_CBC
            - pattern: AES.MODE_CTR
            - pattern: AES.MODE_CFB
            - pattern: AES.MODE_OFB
  severity: ERROR
- id: docker-arbitrary-container-run
  languages:
  - python
  message: If unverified user data can reach the `run` or `create` method it can result
    in running arbitrary container.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    impact: HIGH
    likelihood: LOW
    references:
    - https://cwe.mitre.org/data/definitions/250.html
    subcategory:
    - audit
    technology:
    - docker
  patterns:
  - pattern-either:
    - pattern-inside: "$CLIENT = docker.from_env()\n...\n"
    - pattern-inside: "$CLIENT = docker.DockerClient(...)\n...\n"
  - pattern-either:
    - pattern: "$CLIENT.containers.run(...)\n"
    - pattern: "$CLIENT.containers.create(...)\n"
  - pattern-not: "$CLIENT.containers.run(\"...\",...)\n"
  - pattern-not: "$CLIENT.containers.create(\"...\",...)\n"
  severity: WARNING
- id: sqlalchemy-execute-raw-query
  languages:
  - python
  message: 'Avoiding SQL string concatenation: untrusted input concatenated with raw
    SQL query can result in SQL Injection. In order to execute raw query safely, prepared
    statement should be used. SQLAlchemy provides TextualSQL to easily used prepared
    statement with named parameters. For complex SQL composition, use SQL Expression
    Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be
    a better option.'
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql
    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column
    subcategory:
    - audit
    technology:
    - sqlalchemy
  pattern-either:
  - pattern: "$CONNECTION.execute( $SQL + ..., ... )\n"
  - pattern: "$CONNECTION.execute( $SQL % (...), ...)\n"
  - pattern: "$CONNECTION.execute( $SQL.format(...), ... )\n"
  - pattern: "$CONNECTION.execute(f\"...{...}...\", ...)\n"
  - patterns:
    - pattern-inside: "$QUERY = $SQL + ...\n...\n"
    - pattern: "$CONNECTION.execute($QUERY, ...)\n"
  - patterns:
    - pattern-inside: "$QUERY = $SQL % (...)\n...\n"
    - pattern: "$CONNECTION.execute($QUERY, ...)\n"
  - patterns:
    - pattern-inside: "$QUERY = $SQL.format(...)\n...\n"
    - pattern: "$CONNECTION.execute($QUERY, ...)\n"
  - patterns:
    - pattern-inside: "$QUERY = f\"...{...}...\"\n...\n"
    - pattern: "$CONNECTION.execute($QUERY, ...)\n"
  severity: ERROR
- fix-regex:
    regex: format
    replacement: bindparams
  id: sqlalchemy-sql-injection
  languages:
  - python
  message: Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause
    sql injections if the developer inputs raw SQL into the before-mentioned clauses.
    This pattern captures relevant cases in which the developer inputs raw SQL into
    the distinct, having, group_by, order_by or filter clauses and injects user-input
    into the raw SQL with any function besides "bindparams". Use bindParams to securely
    bind user-input to SQL statements.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    technology:
    - sqlalchemy
  patterns:
  - pattern-either:
    - pattern: "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query(...).$SQLFUNC(\"\
        ...\".$FORMATFUNC(...,$VAR,...))\n"
    - pattern: "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query.join(...).$SQLFUNC(\"\
        ...\".$FORMATFUNC(...,$VAR,...))\n"
    - pattern: "def $FUNC(...,$VAR,...):\n  ...\n  $SESSION.query.$SQLFUNC(\"...\"\
        .$FORMATFUNC(...,$VAR,...))\n"
    - pattern: "def $FUNC(...,$VAR,...):\n  ...\n  query.$SQLFUNC(\"...\".$FORMATFUNC(...,$VAR,...))\n"
  - metavariable-regex:
      metavariable: $SQLFUNC
      regex: (group_by|order_by|distinct|having|filter)
  - metavariable-regex:
      metavariable: $FORMATFUNC
      regex: (?!bindparams)
  severity: WARNING
- id: bad-operator-in-filter
  languages:
  - python
  message: Only comparison operators should be used inside SQLAlchemy filter expressions.
    Use `==` instead of `is`, `!=` instead of `is not`, `sqlalchemy.and_` instead
    of `and`, `sqlalchemy.or_` instead of `or`, `sqlalchemy.not_` instead of `not`,
    and `sqlalchemy.in_` instead of `in_`.
  metadata:
    category: correctness
    references:
    - https://docs.sqlalchemy.org/en/13/orm/tutorial.html#common-filter-operators
    technology:
    - sqlalchemy
  patterns:
  - pattern-inside: "def $ANY(...):\n    ...\n    $MODEL.query\n"
  - pattern-inside: "$TARGET.filter(...)\n"
  - pattern-either:
    - pattern: not $A
    - pattern: $A is $B
    - pattern: $A is not $B
    - pattern: $A and $B
    - pattern: $A or $B
    - pattern: $A in $B
    - pattern: $A not in $B
  severity: WARNING
- fix: "True\n"
  id: pyramid-csrf-check-disabled-globally
  languages:
  - python
  message: Automatic check of cross-site request forgery tokens has been explicitly
    disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)'
    to turn the automatic check for all unsafe methods (per RFC2616).
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: LOW
    likelihood: LOW
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    technology:
    - pyramid
  patterns:
  - pattern-inside: "$CONFIG.set_default_csrf_options(..., require_csrf=$REQUIRE_CSRF,\
      \ ...)\n"
  - pattern: $REQUIRE_CSRF
  - metavariable-comparison:
      comparison: $REQUIRE_CSRF == False
      metavariable: $REQUIRE_CSRF
  severity: ERROR
- fix-regex:
    regex: format
    replacement: bindparams
  id: pyramid-sqlalchemy-sql-injection
  languages:
  - python
  message: Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause
    sql injections if the developer inputs raw SQL into the before-mentioned clauses.
    This pattern captures relevant cases in which the developer inputs raw SQL into
    the distinct, having, group_by, order_by or filter clauses and injects user-input
    into the raw SQL with any function besides "bindparams". Use bindParams to securely
    bind user-input to SQL statements.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data
    subcategory:
    - vuln
    technology:
    - pyramid
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-inside: "$QUERY = $REQ.dbsession.query(...)\n...\n"
    - pattern-either:
      - pattern: "$QUERY.$SQLFUNC(\"...\".$FORMATFUNC(..., $SINK, ...))\n"
      - pattern: "$QUERY.join(...).$SQLFUNC(\"...\".$FORMATFUNC(..., $SINK, ...))\n"
    - pattern: $SINK
    - metavariable-regex:
        metavariable: $SQLFUNC
        regex: (group_by|order_by|distinct|having|filter)
    - metavariable-regex:
        metavariable: $FORMATFUNC
        regex: (?!bindparams)
  pattern-sources:
  - patterns:
    - pattern-inside: "from pyramid.view import view_config\n...\n@view_config( ...\
        \ )\ndef $VIEW($REQ):\n  ...\n"
    - pattern: $REQ.$ANYTHING
    - pattern-not: $REQ.dbsession
  severity: ERROR
- fix: "True\n"
  id: pyramid-csrf-origin-check-disabled
  languages:
  - python
  message: Origin check for the CSRF token is disabled for this view. This might represent
    a security risk if the CSRF storage policy is not known to be secure.
  metadata:
    asvs:
      control_id: 4.2.2 CSRF
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V4-Access-Control.md#v42-operation-level-access-control
      section: V4 Access Control
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: LOW
    likelihood: LOW
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    technology:
    - pyramid
  patterns:
  - pattern-inside: "from pyramid.view import view_config\n...\n@view_config(...,\
      \ check_origin=$CHECK_ORIGIN, ...)\ndef $VIEW(...):\n  ...\n"
  - pattern: $CHECK_ORIGIN
  - metavariable-comparison:
      comparison: $CHECK_ORIGIN == False
      metavariable: $CHECK_ORIGIN
  severity: WARNING
- fix: "True\n"
  id: pyramid-csrf-check-disabled
  languages:
  - python
  message: CSRF protection is disabled for this view. This is a security risk.
  metadata:
    asvs:
      control_id: 4.2.2 CSRF
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V4-Access-Control.md#v42-operation-level-access-control
      section: V4 Access Control
      version: '4'
    category: security
    confidence: LOW
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: LOW
    likelihood: LOW
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - audit
    technology:
    - pyramid
  patterns:
  - pattern-inside: "from pyramid.view import view_config\n...\n@view_config(...,\
      \ require_csrf=$REQUIRE_CSRF, ...)\ndef $VIEW(...):\n  ...\n"
  - pattern: $REQUIRE_CSRF
  - metavariable-comparison:
      comparison: $REQUIRE_CSRF == False
      metavariable: $REQUIRE_CSRF
  severity: WARNING
- fix: "True\n"
  id: pyramid-csrf-origin-check-disabled-globally
  languages:
  - python
  message: Automatic check of the referrer for cross-site request forgery tokens has
    been explicitly disabled globally, which might leave views unprotected when an
    unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)'
    to turn the automatic check for all unsafe methods (per RFC2616).
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: LOW
    likelihood: LOW
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    technology:
    - pyramid
  patterns:
  - pattern-inside: "$CONFIG.set_default_csrf_options(..., check_origin=$CHECK_ORIGIN,\
      \ ...)\n"
  - pattern: $CHECK_ORIGIN
  - metavariable-comparison:
      comparison: $CHECK_ORIGIN == False
      metavariable: $CHECK_ORIGIN
  severity: ERROR
- fix-regex:
    regex: MONGODB-CR
    replacement: SCRAM-SHA-256
  id: mongo-client-bad-auth
  languages:
  - python
  message: Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is
    no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html
    for details).
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-477: Use of Obsolete Function'
    impact: LOW
    likelihood: LOW
    references:
    - https://cwe.mitre.org/data/definitions/477.html
    subcategory:
    - vuln
    technology:
    - pymongo
  pattern: "pymongo.MongoClient(..., authMechanism='MONGODB-CR')\n"
  severity: WARNING
- id: suppressed-exception-handling-finally-break
  languages:
  - python
  message: Having a `break`, `continue`, or `return` in a `finally` block will cause
    strange behaviors, like exceptions not being caught.
  metadata:
    category: correctness
    references:
    - https://docs.python.org/3/reference/compound_stmts.html#the-try-statement
    - https://www.python.org/dev/peps/pep-0601/#rejection-note
    technology:
    - python
  patterns:
  - pattern-either:
    - pattern: "try:\n  ...\nexcept $EXCEPTION:\n  ...\nfinally:\n  ...\n  break\n"
    - pattern: "try:\n  ...\nexcept $EXCEPTION:\n  ...\nfinally:\n  ...\n  continue\n"
    - pattern: "try:\n  ...\nexcept $EXCEPTION:\n  ...\nfinally:\n  ...\n  return\
        \ ...\n"
    - pattern: "try:\n  ...\n  return ...\nfinally:\n  ...\n  return ...\n"
  severity: WARNING
- id: hardcoded-token
  languages:
  - python
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    - https://bento.dev/checks/boto3/hardcoded-access-token/
    - https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/
    subcategory:
    - vuln
    technology:
    - boto3
    - secrets
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $W(...,$TOKEN="$VALUE",...)
      - pattern: $BOTO. ... .$W(...,$TOKEN="$VALUE",...)
    - metavariable-regex:
        metavariable: $TOKEN
        regex: (aws_session_token|aws_access_key_id|aws_secret_access_key)
    - metavariable-pattern:
        language: generic
        metavariable: $VALUE
        patterns:
        - pattern-either:
          - pattern-regex: ^AKI
          - pattern-regex: ^[A-Za-z0-9/+=]+$
    - metavariable-analysis:
        analyzer: entropy
        metavariable: $VALUE
  pattern-sources:
  - pattern: "\"...\"\n"
  severity: WARNING
- id: jwt-python-none-alg
  languages:
  - python
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    subcategory:
    - vuln
    technology:
    - jwt
  pattern-either:
  - pattern: "jwt.encode(...,algorithm=\"none\",...)\n"
  - pattern: jwt.decode(...,algorithms=[...,"none",...],...)
  severity: ERROR
- id: jwt-python-exposed-data
  languages:
  - python
  message: The object is passed strictly to jwt.encode(...) Make sure that sensitive
    information is not exposed through JWT token payload.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    cwe2021-top25: true
    impact: LOW
    likelihood: LOW
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    subcategory:
    - audit
    technology:
    - jwt
  patterns:
  - pattern-inside: "def $FUNC(...,$INPUT,...):\n  ...\n"
  - pattern: jwt.encode($INPUT,...)
  severity: WARNING
- fix-regex:
    regex: (.*)\)
    replacement: \1, autoescape=True)
  id: missing-autoescape-disabled
  languages:
  - python
  message: Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape
    by default. This is dangerous if you are rendering to a browser because this allows
    for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping
    by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()'
    to only enable automatic escaping for certain file extensions.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-116: Improper Encoding or Escaping of Output'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://jinja.palletsprojects.com/en/2.11.x/api/#basics
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html
    subcategory:
    - vuln
    technology:
    - jinja2
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=$VAL, ...)
  - pattern: jinja2.Environment(...)
  severity: WARNING
- id: useless-assignment-keyed
  languages:
  - python
  message: key `$Y` in `$X` is assigned twice; the first assignment is useless
  metadata:
    category: maintainability
    technology:
    - python
  pattern-either:
  - pattern: "$X[$Y] = ...\n$X[$Y] = ...\n"
  - pattern: "$X[$Y][$Z] = ...\n$X[$Y][$Z] = ...\n"
  severity: WARNING
- id: code-after-unconditional-return
  languages:
  - python
  message: code after return statement will not be executed
  metadata:
    category: maintainability
    technology:
    - python
  pattern: "return ...\n$S\n"
  severity: WARNING
- id: return-not-in-function
  languages:
  - python
  message: '`return` only makes sense inside a function'
  metadata:
    category: maintainability
    technology:
    - python
  patterns:
  - pattern-not-inside: "def $F(...):\n    ...\n# TODO: first pattern should just\
      \ automatically include this one\n"
  - pattern-not-inside: "def $F(...) ->  $Y:\n    ...\n"
  - pattern: return ...
  severity: WARNING
- id: useless-inner-function
  languages:
  - python
  message: function `$FF` is defined inside a function but never used
  metadata:
    category: maintainability
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - python
  patterns:
  - pattern-not-inside: "def $F(...):\n    ...\n    def $FF(...):\n       ...\n  \
      \  ...\n    <... $FF ...>\n"
  - pattern-not-inside: "def $F(...):\n    ...\n    class $CLAZZ(...):\n      ...\n"
  - pattern-inside: "def $F(...):\n  ...\n  def $FF(...):\n     ...\n  ...\n"
  - pattern: "def $FF(...):\n  ...\n"
  - pattern-not: "@$DECORATOR\ndef $FF(...):\n  ...\n"
  severity: ERROR
- id: useless-literal
  languages:
  - python
  message: key `$X` is uselessly assigned twice
  metadata:
    category: maintainability
    references:
    - https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
    technology:
    - python
  patterns:
  - pattern-either:
    - pattern: "{..., $X: $A, ..., $X: $B, ...}\n"
    - pattern: "dict(..., ($X, $A), ..., ($X, $B), ...)\n"
  - focus-metavariable: $X
  severity: WARNING
- id: dangerous-os-exec
  languages:
  - python
  message: Found user controlled content when spawning a process. This is dangerous
    because it allows a malicious actor to execute commands.
  metadata:
    asvs:
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-not: os.$METHOD("...", ...)
        - pattern: os.$METHOD(...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe)
      - patterns:
        - pattern-not: os.$METHOD("...", [$PATH,"...","...",...],...)
        - pattern-inside: os.$METHOD($BASH,[$PATH,"-c",$CMD,...],...)
        - pattern: $CMD
        - metavariable-regex:
            metavariable: $METHOD
            regex: (execv|execve|execvp|execvpe)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
      - patterns:
        - pattern-not: os.$METHOD("...", $PATH, "...", "...",...)
        - pattern-inside: os.$METHOD($BASH, $PATH, "-c", $CMD,...)
        - pattern: $CMD
        - metavariable-regex:
            metavariable: $METHOD
            regex: (execl|execle|execlp|execlpe)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
                \  ...\n"
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ,\
              \ ...):\n  ...\n"
          - patterns:
            - pattern-either:
              - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
                  \  ...\n"
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\
                  \ ...):\n  ...                              \n"
            - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: "class $SERVER(..., http.server.BaseHTTPRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.StreamRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.DatagramRequestHandler,\
              \ ...):\n  ...\n"
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  severity: ERROR
- id: dangerous-system-call
  languages:
  - python
  message: Found user-controlled data used in a system call. This could allow a malicious
    actor to execute commands. Use the 'subprocess' module instead, which is easier
    to use without accidentally exposing a command injection vulnerability.
  metadata:
    asvs:
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sinks:
  - patterns:
    - pattern-not: os.$W("...", ...)
    - pattern-either:
      - pattern: os.system(...)
      - pattern: getattr(os, "system")(...)
      - pattern: __import__("os").system(...)
      - pattern: getattr(__import__("os"), "system")(...)
      - pattern: "$X = __import__(\"os\")\n...\n$X.system(...)\n"
      - pattern: "$X = __import__(\"os\")\n...\ngetattr($X, \"system\")(...)\n"
      - pattern: "$X = getattr(os, \"system\")\n...\n$X(...)\n"
      - pattern: "$X = __import__(\"os\")\n...\n$Y = getattr($X, \"system\")\n...\n\
          $Y(...)\n"
      - pattern: os.popen(...)
      - pattern: os.popen2(...)
      - pattern: os.popen3(...)
      - pattern: os.popen4(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
                \  ...\n"
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ,\
              \ ...):\n  ...\n"
          - patterns:
            - pattern-either:
              - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
                  \  ...\n"
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\
                  \ ...):\n  ...                              \n"
            - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: "class $SERVER(..., http.server.BaseHTTPRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.StreamRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.DatagramRequestHandler,\
              \ ...):\n  ...\n"
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  severity: ERROR
- id: insecure-hash-algorithm-md5
  languages:
  - python
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    asvs:
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      section: V6 Stored Cryptography Verification Requirements
      version: '4'
    bandit-code: B303
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    subcategory:
    - vuln
    technology:
    - python
  pattern: hashlib.md5(...)
  severity: WARNING
- id: use-defused-xmlrpc
  languages:
  - python
  message: Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities.
    Use defusedxml.xmlrpc instead.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML\
      \ Entity Expansion')"
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://pypi.org/project/defusedxml/
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities
    source-rule-url: https://github.com/PyCQA/bandit/blob/07f84cb5f5e7c1055e6feaa0fe93afa471de0ac3/bandit/blacklists/imports.py#L160
    subcategory:
    - vuln
    technology:
    - python
  pattern-either:
  - pattern: import xmlrpclib
  - pattern: import SimpleXMLRPCServer
  - pattern: import xmlrpc
  severity: ERROR
- id: insecure-hash-function
  languages:
  - python
  message: Detected use of an insecure MD4 or MD5 hash function. These functions have
    known vulnerabilities and are considered deprecated. Consider using 'SHA256' or
    a similar function instead.
  metadata:
    asvs:
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      section: V6 Stored Cryptography Verification Requirements
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py
    subcategory:
    - audit
    technology:
    - python
  pattern-either:
  - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
  - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
  severity: WARNING
- id: dangerous-subinterpreters-run-string
  languages:
  - python
  message: Found user controlled content in `run_string`. This is dangerous because
    it allows a malicious actor to run arbitrary Python code.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://bugs.python.org/issue43472
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sinks:
  - patterns:
    - pattern: "_xxsubinterpreters.run_string($ID, $PAYLOAD, ...)\n"
    - pattern-not: "_xxsubinterpreters.run_string($ID, \"...\", ...)\n"
    - focus-metavariable: $PAYLOAD
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
                \  ...\n"
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ,\
              \ ...):\n  ...\n"
          - patterns:
            - pattern-either:
              - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
                  \  ...\n"
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\
                  \ ...):\n  ...                              \n"
            - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: "class $SERVER(..., http.server.BaseHTTPRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.StreamRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.DatagramRequestHandler,\
              \ ...):\n  ...\n"
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  severity: WARNING
- id: use-defused-xml
  languages:
  - python
  message: The Python documentation recommends using `defusedxml` instead of `xml`
    because the native Python `xml` library is vulnerable to XML External Entity (XXE)
    attacks. These attacks can leak confidential data and "XML bombs" can cause denial
    of service.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.python.org/3/library/xml.html
    - https://github.com/tiran/defusedxml
    - https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing
    subcategory:
    - vuln
    technology:
    - python
  pattern: import xml
  severity: ERROR
- id: dangerous-testcapi-run-in-subinterp
  languages:
  - python
  message: Found user controlled content in `run_in_subinterp`. This is dangerous
    because it allows a malicious actor to run arbitrary Python code.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: HIGH
    owasp:
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "_testcapi.run_in_subinterp($PAYLOAD, ...)\n"
      - pattern: "test.support.run_in_subinterp($PAYLOAD, ...)\n"
    - focus-metavariable: $PAYLOAD
    - pattern-not: "_testcapi.run_in_subinterp(\"...\", ...)\n"
    - pattern-not: "test.support.run_in_subinterp(\"...\", ...)\n"
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
                \  ...\n"
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ,\
              \ ...):\n  ...\n"
          - patterns:
            - pattern-either:
              - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
                  \  ...\n"
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\
                  \ ...):\n  ...                              \n"
            - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: "class $SERVER(..., http.server.BaseHTTPRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.StreamRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.DatagramRequestHandler,\
              \ ...):\n  ...\n"
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  severity: WARNING
- fix-regex:
    regex: (.*)\)
    replacement: \1, quoting=csv.QUOTE_ALL)
  id: unquoted-csv-writer
  languages:
  - python
  message: This rule is deprecated.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-1236: Improper Neutralization of Formula Elements in a CSV File'
    deprecated: true
    impact: LOW
    likelihood: LOW
    owasp: A01:2017 - Injection
    references:
    - https://github.com/returntocorp/semgrep-rules/issues/2351
    subcategory:
    - audit
    technology:
    - python
  patterns:
  - pattern: a()
  - pattern: b()
  severity: ERROR
- id: dangerous-interactive-code-run
  languages:
  - python
  message: Found user controlled data inside InteractiveConsole/InteractiveInterpreter
    method. This is dangerous if external data can reach this function call because
    it allows a malicious actor to run arbitrary Python code.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "$X = code.InteractiveConsole(...)\n...\n"
      - pattern-inside: "$X = code.InteractiveInterpreter(...)\n...\n"
    - pattern-either:
      - pattern: "$X.push($PAYLOAD,...)\n"
      - pattern: "$X.runsource($PAYLOAD,...)\n"
      - pattern: "$X.runcode(code.compile_command($PAYLOAD),...)\n"
      - pattern: "$PL = code.compile_command($PAYLOAD,...)\n...\n$X.runcode($PL,...)\n"
    - focus-metavariable: $PAYLOAD
    - pattern-not: "$X.push(\"...\",...)\n"
    - pattern-not: "$X.runsource(\"...\",...)\n"
    - pattern-not: "$X.runcode(code.compile_command(\"...\"),...)\n"
    - pattern-not: "$PL = code.compile_command(\"...\",...)\n...\n$X.runcode($PL,...)\n"
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
                \  ...\n"
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: "def $FUNC(request, ...):\n  ...\n"
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: "@rest_framework.decorators.api_view(...)\ndef $FUNC($REQ,\
              \ ...):\n  ...\n"
          - patterns:
            - pattern-either:
              - pattern-inside: "class $VIEW(..., rest_framework.views.APIView, ...):\n\
                  \  ...\n"
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\
                  \ ...):\n  ...                              \n"
            - pattern-inside: "def $METHOD(self, $REQ, ...):\n  ...\n"
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: "class $SERVER(..., http.server.BaseHTTPRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.StreamRequestHandler,\
              \ ...):\n  ...\n"
          - pattern-inside: "class $SERVER(..., http.server.DatagramRequestHandler,\
              \ ...):\n  ...\n"
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: "@pyramid.view.view_config( ... )\ndef $VIEW($REQ):\n  ...\n"
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  severity: WARNING
- fix-regex:
    regex: csv
    replacement: defusedcsv
  id: use-defusedcsv
  languages:
  - python
  message: Detected the generation of a CSV file using the built-in `csv` module.
    If user data is used to generate the data in this file, it is possible that an
    attacker could inject a formula when the CSV is imported into a spreadsheet application
    that runs an attacker script, which could steal data from the importing user or,
    at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement
    with the same API that will attempt to mitigate formula injection attempts. You
    can use `defusedcsv` instead of `csv` to safely generate CSVs.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-1236: Improper Neutralization of Formula Elements in a CSV File'
    impact: LOW
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/raphaelm/defusedcsv
    - https://owasp.org/www-community/attacks/CSV_Injection
    - https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities
    subcategory:
    - audit
    technology:
    - python
  patterns:
  - pattern: csv.writer(...)
  - pattern-not: defusedcsv.writer(...)
  severity: INFO
- id: avoid-unsafe-ruamel
  languages:
  - python
  message: Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create
    arbitrary Python objects. A malicious actor could exploit this to run arbitrary
    code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ
    subcategory:
    - audit
    technology:
    - ruamel.yaml
  pattern-either:
  - pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  - pattern: ruamel.yaml.YAML(..., typ='base', ...)
  severity: ERROR
- fix-regex:
    count: 1
    regex: unsafe_load
    replacement: safe_load
  id: avoid-pyyaml-load
  languages:
  - python
  message: Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`,
    `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe
    methods of deserializing YAML. An attacker with control over the YAML input could
    create special YAML input that allows the attacker to run arbitrary Python code.
    This would allow the attacker to steal files, download and install malware, or
    otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    subcategory:
    - audit
    technology:
    - pyyaml
  patterns:
  - pattern-inside: "import yaml\n...\n"
  - pattern-not-inside: "$YAML = ruamel.yaml.YAML(...)\n...\n"
  - pattern-either:
    - pattern: yaml.unsafe_load(...)
    - pattern: yaml.load(..., Loader=yaml.Loader, ...)
    - pattern: yaml.load(..., Loader=yaml.UnsafeLoader, ...)
    - pattern: yaml.load(..., Loader=yaml.CLoader, ...)
    - pattern: yaml.load_all(..., Loader=yaml.Loader, ...)
    - pattern: yaml.load_all(..., Loader=yaml.UnsafeLoader, ...)
    - pattern: yaml.load_all(..., Loader=yaml.CLoader, ...)
  severity: ERROR
- id: eval-detected
  languages:
  - python
  message: Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    asvs:
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: LOW
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    source-rule-url: https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval
    subcategory:
    - audit
    technology:
    - python
  patterns:
  - pattern-not: eval("...")
  - pattern: eval(...)
  severity: WARNING
- id: weak-ssl-version
  languages:
  - python
  message: An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL
    versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2'
    or higher.
  metadata:
    asvs:
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      section: V9 Communications Verification Requirements
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/html/rfc7568
    - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html
    - https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30
    subcategory:
    - audit
    technology:
    - python
  pattern-either:
  - pattern: ssl.PROTOCOL_SSLv2
  - pattern: ssl.PROTOCOL_SSLv3
  - pattern: ssl.PROTOCOL_TLSv1
  - pattern: ssl.PROTOCOL_TLSv1_1
  - pattern: pyOpenSSL.SSL.SSLv2_METHOD
  - pattern: pyOpenSSL.SSL.SSLv23_METHOD
  - pattern: pyOpenSSL.SSL.SSLv3_METHOD
  - pattern: pyOpenSSL.SSL.TLSv1_METHOD
  - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  severity: WARNING
- id: mako-templates-detected
  languages:
  - python
  message: Mako templates do not provide a global HTML escaping mechanism. This means
    you must escape all sensitive data in your templates using '| u' for URL escaping
    or '| h' for HTML escaping. If you are using Mako to serve web content, consider
    using a system such as Jinja2 which enables global escaping.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping
    - https://jinja.palletsprojects.com/en/2.11.x/intro/#
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/mako_templates.py
    subcategory:
    - audit
    technology:
    - mako
  pattern: mako.template.Template(...)
  severity: INFO
- id: multiprocessing-recv
  languages:
  - python
  message: 'The Connection.recv() method automatically unpickles the data it receives,
    which can be a security risk unless you can trust the process which sent the message.
    Therefore, unless the connection object was produced using Pipe() you should only
    use the recv() and send() methods after performing some sort of authentication.
    See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection'
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: LOW
    likelihood: LOW
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection
    subcategory:
    - audit
    technology:
    - python
  pattern-either:
  - pattern: multiprocessing.connection.Connection.recv(...)
  - pattern: multiprocessing.connection.Client.recv(...)
  - pattern: "$C = multiprocessing.connection.Client(...)\n...\n$C.recv(...)\n"
  severity: WARNING
- id: dynamic-urllib-use-detected
  languages:
  - python
  message: Detected a dynamic value being used with urllib. urllib supports 'file://'
    schemes, so a dynamic value controlled by a malicious actor may allow them to
    read arbitrary files. Audit uses of urllib calls to ensure user data cannot control
    the URLs, or consider using the 'requests' library instead.
  metadata:
    asvs:
      control_id: 5.2.4 Dynamic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    bandit-code: B310
    category: security
    confidence: LOW
    cwe:
    - 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    impact: LOW
    likelihood: LOW
    owasp: A01:2017 - Injection
    references:
    - https://cwe.mitre.org/data/definitions/939.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163
    subcategory:
    - audit
    technology:
    - python
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - pattern: urllib.urlopen(...)
    - pattern: urllib.request.urlopen(...)
    - pattern: urllib.urlretrieve(...)
    - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: "$OPENER = urllib.URLopener(...)\n...\n"
        - pattern-inside: "$OPENER = urllib.request.URLopener(...)\n...\n"
        - pattern-inside: "$OPENER = urllib.FancyURLopener(...)\n...\n"
        - pattern-inside: "$OPENER = urllib.request.FancyURLopener(...)\n...\n"
      - pattern-either:
        - pattern: $OPENER.open(...)
        - pattern: $OPENER.retrieve(...)
  severity: WARNING
- id: python-reverse-shell
  languages:
  - python
  message: Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-553: Command Shell in Externally Accessible Directory'
    impact: MEDIUM
    likelihood: LOW
    references:
    - https://cwe.mitre.org/data/definitions/553.html
    subcategory:
    - audit
    technology:
    - python
  patterns:
  - pattern-either:
    - pattern: pty.spawn("$BINPATH",...)
    - pattern: subprocess.call(["$BINPATH",...],...)
  - metavariable-regex:
      metavariable: $BINPATH
      regex: /bin/.*?sh\b
  - pattern-inside: "import socket\n...\n$S = socket.socket(...)\n...\n$S.connect(($IP,$PORT),...)\n\
      ...\n"
  severity: WARNING
- id: md5-used-as-password
  languages:
  - python
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: LOW
    likelihood: HIGH
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    - https://docs.python.org/3/library/hashlib.html#hashlib.scrypt
    subcategory:
    - vuln
    technology:
    - pycryptodome
    - hashlib
    - md5
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern: $FUNCTION(...)
    - metavariable-regex:
        metavariable: $FUNCTION
        regex: (?i)(.*password.*)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: hashlib.md5
      - pattern: hashlib.new(..., name="MD5", ...)
      - pattern: Cryptodome.Hash.MD5
      - pattern: Crypto.Hash.MD5
      - pattern: cryptography.hazmat.primitives.hashes.MD5
  severity: WARNING
- id: system-wildcard-detected
  languages:
  - python
  message: Detected use of the wildcard character in a system call that spawns a shell.
    This subjects the wildcard to normal shell expansion, which can have unintended
    consequences if there exist any non-standard file names. Consider a file named
    '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    for more information.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-155: Improper Neutralization of Wildcards or Matching Symbols'
    impact: LOW
    likelihood: LOW
    owasp: A01:2017 - Injection
    references:
    - https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    source-url-open: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/injection_wildcard.py
    subcategory:
    - audit
    technology:
    - python
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: (tar|chmod|chown|rsync)(.*?)\*
  severity: WARNING
- id: telnetlib
  languages:
  - python
  message: Telnet does not encrypt communications. Use SSH instead.
  metadata:
    bandit-code: B312
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/telnetlib.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L208
    subcategory:
    - audit
    technology:
    - python
  pattern: telnetlib.$ANYTHING(...)
  severity: WARNING
- id: paramiko-implicit-trust-host-key
  languages:
  - python
  message: Detected a paramiko host key policy that implicitly trusts a server's host
    key. Host keys should be verified to ensure the connection is not to a malicious
    server. Use RejectPolicy or a custom subclass instead.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-322: Key Exchange without Entity Authentication'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/ssh_no_host_key_verification.py
    subcategory:
    - audit
    technology:
    - paramiko
  patterns:
  - pattern-inside: "$CLIENT = paramiko.client.SSHClient(...)\n...\n$CLIENT.set_missing_host_key_policy(...)\n"
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  severity: WARNING
- id: ssl-wrap-socket-is-deprecated
  languages:
  - python
  message: "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket\
    \ without server name indication or hostname matching. Instead, create an SSL\
    \ context using 'ssl.SSLContext()' and use that to wrap a socket."
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/ssl.html#ssl.wrap_socket
    - https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket
    subcategory:
    - vuln
    technology:
    - python
  pattern: ssl.wrap_socket(...)
  severity: WARNING
- id: marshal-usage
  languages:
  - python
  message: 'The marshal module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security'
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.python.org/3/library/marshal.html?highlight=security
    subcategory:
    - audit
    technology:
    - python
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  severity: WARNING
- id: httpsconnection-detected
  languages:
  - python
  message: The HTTPSConnection API has changed frequently with minor releases of Python.
    Ensure you are using the API for your version of Python securely. For example,
    Python 3 versions prior to 3.4.3 will not verify SSL certificates by default.
    See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    for more information.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    subcategory:
    - audit
    technology:
    - python
  pattern-either:
  - pattern: httplib.HTTPSConnection(...)
  - pattern: http.client.HTTPSConnection(...)
  - pattern: six.moves.http_client.HTTPSConnection(...)
  severity: WARNING
- id: ftplib
  languages:
  - python
  message: FTP does not encrypt communications by default. This can lead to sensitive
    data being exposed. Ensure use of FTP here does not expose sensitive data.
  metadata:
    bandit-code: B321
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/telnetlib.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L265
    subcategory:
    - audit
    technology:
    - ftplib
  pattern: ftplib.$ANYTHING(...)
  severity: WARNING
- id: exec-detected
  languages:
  - python
  message: Detected the use of exec(). exec() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    asvs:
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: LOW
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html
    subcategory:
    - audit
    technology:
    - python
  patterns:
  - pattern-not: exec("...")
  - pattern: exec(...)
  severity: WARNING
- id: formatted-sql-query
  languages:
  - python
  message: Detected possible formatted SQL query. Use parameterized queries instead.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://stackoverflow.com/questions/775296/mysql-parameterized-queries
    subcategory:
    - audit
    technology:
    - python
  pattern-either:
  - pattern: $DB.execute("..." % ...)
  - pattern: $DB.execute("...".format(...))
  - pattern: $DB.execute(f"...")
  - patterns:
    - pattern-either:
      - pattern-inside: "$SQL = \"...\" % ...\n...\n"
      - pattern-inside: "$SQL = \"...\".format(...)\n...\n"
      - pattern-inside: "$SQL = f\"...{$X}...\"\n...\n"
    - pattern: $DB.execute($SQL)
  severity: WARNING
- id: python-logger-credential-disclosure
  languages:
  - python
  message: Detected a python logger call with a potential hardcoded secret $FORMAT_STRING
    being logged. This may lead to secret credentials being exposed. Make sure that
    the logger is not logging  sensitive information.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-532: Insertion of Sensitive Information into Log File'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A09:2021 - Security Logging and Monitoring Failures
    references:
    - https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures
    subcategory:
    - vuln
    technology:
    - python
  patterns:
  - pattern: "$LOGGER_OBJ.$LOGGER_CALL($FORMAT_STRING,...)\n"
  - metavariable-regex:
      metavariable: $LOGGER_OBJ
      regex: (?i)(_logger|logger|self.logger|log)
  - metavariable-regex:
      metavariable: $LOGGER_CALL
      regex: (debug|info|warn|warning|error|exception|critical)
  - metavariable-regex:
      metavariable: $FORMAT_STRING
      regex: (?i).*(api.key|secret|credential|token|password).*\%s.*
  severity: WARNING
- id: listen-eval
  languages:
  - python
  message: Because portions of the logging configuration are passed through eval(),
    use of this function may open its users to a security risk. While the function
    only binds to a socket on localhost, and so does not accept connections from remote
    machines, there are scenarios where untrusted code could be run under the account
    of the process which calls listen(). To avoid this happening, use the `verify()`
    argument to `listen()` to prevent unrecognized configurations.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen
    subcategory:
    - audit
    technology:
    - python
  pattern: logging.config.listen(...)
  severity: WARNING
- id: http-not-https-connection
  languages:
  - python
  message: Detected HTTPConnectionPool. This will transmit data in cleartext. It is
    recommended to use HTTPSConnectionPool instead for to encrypt communications.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool
    subcategory:
    - audit
    technology:
    - python
  pattern-either:
  - pattern: urllib3.HTTPConnectionPool(...)
  - pattern: urllib3.connectionpool.HTTPConnectionPool(...)
  severity: ERROR
- id: disabled-cert-validation
  languages:
  - python
  message: certificate verification explicitly disabled, insecure connections possible
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    subcategory:
    - vuln
    technology:
    - python
  patterns:
  - pattern-either:
    - pattern: urllib3.PoolManager(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.ProxyManager(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.connectionpool.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.connection_from_url(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.proxy_from_url(..., cert_reqs=$REQS, ...)
    - pattern: $CONTEXT.wrap_socket(..., cert_reqs=$REQS, ...)
    - pattern: ssl.wrap_socket(..., cert_reqs=$REQS, ...)
  - metavariable-regex:
      metavariable: $REQS
      regex: (NONE|CERT_NONE|CERT_OPTIONAL|ssl\.CERT_NONE|ssl\.CERT_OPTIONAL|\'NONE\'|\"NONE\"|\'OPTIONAL\'|\"OPTIONAL\")
  severity: ERROR
- id: avoid-bind-to-all-interfaces
  languages:
  - python
  message: Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose
    the server publicly as it binds to all available interfaces. Consider instead
    getting correct address from an environment variable or configuration file.
  metadata:
    category: security
    confidence: HIGH
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    cwe2021-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    technology:
    - python
  pattern-either:
  - pattern: "$S = socket.socket(...)\n...\n$S.bind((\"0.0.0.0\", ...))\n"
  - pattern: "$S = socket.socket(...)\n...\n$S.bind((\"::\", ...))\n"
  - pattern: "$S = socket.socket(...)\n...\n$S.bind((\"\", ...))\n"
  severity: INFO
- id: paramiko-exec-command
  languages:
  - python
  message: Unverified SSL context detected. This will permit insecure connections
    without verifying SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command
    - https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py
    subcategory:
    - audit
    technology:
    - paramiko
  patterns:
  - pattern-inside: "$CLIENT = paramiko.client.SSHClient(...)\n...\n"
  - pattern: $CLIENT.exec_command(...)
  - pattern-not: $CLIENT.exec_command("...", ...)
  severity: ERROR
- id: psycopg-sqli
  languages:
  - python
  message: "Detected string concatenation with a non-literal variable in a psycopg2\
    \ Python SQL statement. This could lead to SQL injection if the variable is user-controlled\
    \ and not properly sanitized. In order to prevent SQL injection, use parameterized\
    \ queries or prepared statements instead. You can use prepared statements by creating\
    \ a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized\
    \ queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.psycopg.org/docs/sql.html
    subcategory:
    - audit
    technology:
    - psycopg
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CUR.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: "$QUERY = $X + $Y\n...\n"
        - pattern-inside: "$QUERY += $X\n...\n"
        - pattern-inside: "$QUERY = '...'.format(...)\n...\n"
        - pattern-inside: "$QUERY = '...' % (...)\n...\n"
        - pattern-inside: "$QUERY = f'...{$USERINPUT}...'\n...\n"
      - pattern-not-inside: "$QUERY += \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = \"...\" + \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = '...'.format()\n...\n"
      - pattern-not-inside: "$QUERY = '...' % ()\n...\n"
    - pattern: $CUR.$METHOD(..., $X + $Y, ...)
    - pattern: $CUR.$METHOD(..., '...'.format(...), ...)
    - pattern: $CUR.$METHOD(..., '...' % (...), ...)
    - pattern: $CUR.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: "$CONN = psycopg2.connect(...)\n...\n$CUR = $CONN.cursor(...)\n\
        ...\n"
    - pattern-inside: "$CONN = psycopg2.connect(...)\n...\nwith $CONN.cursor(...)\
        \ as $CUR:\n  ...\n"
  - pattern-not: $CUR.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CUR.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CUR.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(execute|executemany|mogrify)$
  severity: WARNING
- id: asyncpg-sqli
  languages:
  - python
  message: "Detected string concatenation with a non-literal variable in a asyncpg\
    \ Python SQL statement. This could lead to SQL injection if the variable is user-controlled\
    \ and not properly sanitized. In order to prevent SQL injection, use parameterized\
    \ queries or prepared statements instead. You can create parameterized queries\
    \ like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create\
    \ prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT\
    \ $1 FROM table\"); await stmt.fetch(user_value)'"
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/MagicStack/asyncpg
    - https://magicstack.github.io/asyncpg/current/
    subcategory:
    - audit
    technology:
    - asyncpg
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CONN.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: "$QUERY = $X + $Y\n...\n"
        - pattern-inside: "$QUERY += $X\n...\n"
        - pattern-inside: "$QUERY = '...'.format(...)\n...\n"
        - pattern-inside: "$QUERY = '...' % (...)\n...\n"
        - pattern-inside: "$QUERY = f'...{$USERINPUT}...'\n...\n"
      - pattern-not-inside: "$QUERY += \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = \"...\" + \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = '...'.format()\n...\n"
      - pattern-not-inside: "$QUERY = '...' % ()\n...\n"
    - pattern: $CONN.$METHOD(..., $X + $Y, ...)
    - pattern: $CONN.$METHOD(..., '...'.format(...), ...)
    - pattern: $CONN.$METHOD(..., '...' % (...), ...)
    - pattern: $CONN.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: "$CONN = await asyncpg.connect(...)\n...\n"
    - pattern-inside: "async with asyncpg.create_pool(...) as $CONN:\n    ...\n"
    - pattern-inside: "async with $POOL.acquire(...) as $CONN:\n    ...\n"
    - pattern-inside: "$CONN = await $POOL.acquire(...)\n...\n"
    - pattern-inside: "def $FUNCNAME(..., $CONN: Connection, ...):\n    ...\n"
  - pattern-not: $CONN.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CONN.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CONN.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(fetch|fetchrow|fetchval|execute|executemany|prepare|cursor|copyfromquery)$
  severity: WARNING
- id: pg8000-sqli
  languages:
  - python
  message: "Detected string concatenation with a non-literal variable in a pg8000\
    \ Python SQL statement. This could lead to SQL injection if the variable is user-controlled\
    \ and not properly sanitized. In order to prevent SQL injection, use parameterized\
    \ queries or prepared statements instead. You can create parameterized queries\
    \ like so: 'conn.run(\"SELECT :value FROM table\", value=myvalue)'. You can also\
    \ create prepared statements with 'conn.prepare': 'conn.prepare(\"SELECT (:v)\
    \ FROM table\")'"
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/tlocke/pg8000
    subcategory:
    - audit
    technology:
    - pg8000
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CONN.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: "$QUERY = $X + $Y\n...\n"
        - pattern-inside: "$QUERY += $X\n...\n"
        - pattern-inside: "$QUERY = '...'.format(...)\n...\n"
        - pattern-inside: "$QUERY = '...' % (...)\n...\n"
        - pattern-inside: "$QUERY = f'...{$USERINPUT}...'\n...\n"
      - pattern-not-inside: "$QUERY += \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = \"...\" + \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = '...'.format()\n...\n"
      - pattern-not-inside: "$QUERY = '...' % ()\n...\n"
    - pattern: $CONN.$METHOD(..., $X + $Y, ...)
    - pattern: $CONN.$METHOD(..., '...'.format(...), ...)
    - pattern: $CONN.$METHOD(..., '...' % (...), ...)
    - pattern: $CONN.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: "$CONN = pg8000.native.Connection(...)\n...\n"
    - pattern-inside: "$CONN = pg8000.dhapi.connect(...)\n...\n"
    - pattern-inside: "$CONN1 = pg8000.connect(...)\n...\n$CONN = $CONN1.cursor(...)\n\
        ...\n"
    - pattern-inside: "$CONN = pg8000.connect(...)\n...\n"
  - pattern-not: $CONN.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CONN.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CONN.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(run|execute|executemany|prepare)$
  severity: WARNING
- id: aiopg-sqli
  languages:
  - python
  message: "Detected string concatenation with a non-literal variable in an aiopg\
    \ Python SQL statement. This could lead to SQL injection if the variable is user-controlled\
    \ and not properly sanitized. In order to prevent SQL injection, use parameterized\
    \ queries instead. You can create parameterized queries like so: 'cur.execute(\"\
    SELECT %s FROM table\", (user_value,))'."
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/aio-libs/aiopg
    subcategory:
    - audit
    technology:
    - aiopg
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CUR.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: "$QUERY = $X + $Y\n...\n"
        - pattern-inside: "$QUERY += $X\n...\n"
        - pattern-inside: "$QUERY = '...'.format(...)\n...\n"
        - pattern-inside: "$QUERY = '...' % (...)\n...\n"
        - pattern-inside: "$QUERY = f'...{$USERINPUT}...'\n...\n"
      - pattern-not-inside: "$QUERY += \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = \"...\" + \"...\"\n...\n"
      - pattern-not-inside: "$QUERY = '...'.format()\n...\n"
      - pattern-not-inside: "$QUERY = '...' % ()\n...\n"
    - pattern: $CUR.$METHOD(..., $X + $Y, ...)
    - pattern: $CUR.$METHOD(..., '...'.format(...), ...)
    - pattern: $CUR.$METHOD(..., '...' % (...), ...)
    - pattern: $CUR.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: "$CONN = await aiopg.connect(...)\n...\n$CUR = await $CONN.cursor(...)\n\
        ...\n"
    - pattern-inside: "$POOL = await aiopg.create_pool(...)\n...\nasync with $POOL.acquire(...)\
        \ as $CONN:\n  ...\n  async with $CONN.cursor(...) as $CUR:\n    ...\n"
    - pattern-inside: "$POOL = await aiopg.create_pool(...)\n...\nwith (await $POOL.cursor(...))\
        \ as $CUR:\n  ...\n"
    - pattern-inside: "$POOL = await aiopg.create_pool(...)\n...\nasync with $POOL\
        \ as $CONN:\n  ...\n  $CUR = await $CONN.cursor(...)\n  ...\n"
    - pattern-inside: "$POOL = await aiopg.create_pool(...)\n...\nasync with $POOL.cursor(...)\
        \ as $CUR:\n  ...\n"
  - pattern-not: $CUR.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CUR.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CUR.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(execute)$
  severity: WARNING
- fix-regex:
    count: 1
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  id: request-session-with-http
  languages:
  - python
  message: Detected a request using 'http://'. This request will be unencrypted. Use
    'https://' instead.
  metadata:
    asvs:
      control_id: 9.1.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      section: V9 Communications Verification Requirements
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    technology:
    - requests
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: requests.Session(...).$W($SINK, ...)
      - pattern: requests.Session(...).request($METHOD, $SINK, ...)
    - focus-metavariable: $SINK
  pattern-sources:
  - patterns:
    - pattern: "\"$URL\"\n"
    - metavariable-pattern:
        language: regex
        metavariable: $URL
        patterns:
        - pattern-regex: http://
        - pattern-not-regex: .*://localhost
        - pattern-not-regex: .*://127\.0\.0\.1
  severity: INFO
- fix-regex:
    count: 1
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  id: request-with-http
  languages:
  - python
  message: Detected a request using 'http://'. This request will be unencrypted, and
    attackers could listen into traffic on the network and be able to obtain sensitive
    information. Use 'https://' instead.
  metadata:
    asvs:
      control_id: 9.1.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      section: V9 Communications Verification Requirements
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    technology:
    - requests
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: requests.$W($SINK, ...)
      - pattern: requests.request($METHOD, $SINK, ...)
      - pattern: requests.Request($METHOD, $SINK, ...)
    - focus-metavariable: $SINK
  pattern-sources:
  - patterns:
    - pattern: "\"$URL\"\n"
    - metavariable-pattern:
        language: regex
        metavariable: $URL
        patterns:
        - pattern-regex: http://
        - pattern-not-regex: .*://localhost
        - pattern-not-regex: .*://127\.0\.0\.1
  severity: INFO
- id: insecure-urlretrieve-ftp
  languages:
  - python
  message: Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be
    encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching
    to a library which supports SFTP.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.urlretrieve("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.urlretrieve($URL,\
      \ ...)\n"
  - pattern: "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.urlretrieve($URL,\
      \ ...)"
  severity: WARNING
- fix-regex:
    count: 1
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  id: insecure-openerdirector-open
  languages:
  - python
  message: Detected an unsecured transmission channel. 'OpenerDirector.open(...)'
    is being used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.OpenerDirector(...).open("=~/[Hh][Tt][Tt][Pp]://.*/",
      ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
    - pattern: $OPENERDIRECTOR.open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
    - pattern: "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL,\
        \ ...)\n"
  - pattern: "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.OpenerDirector(...).open($URL,\
      \ ...)\n"
  - patterns:
    - pattern-inside: "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n\
        \  ...\n"
    - pattern-either:
      - pattern: urllib.request.OpenerDirector(...).open($URL, ...)
      - patterns:
        - pattern-inside: "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n\
            ...\n"
        - pattern: $OPENERDIRECTOR.open($URL, ...)
  severity: WARNING
- id: insecure-urlopener-retrieve-ftp
  languages:
  - python
  message: Detected an insecure transmission channel. 'URLopener.retrieve(...)' is
    being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider
    using a library which supports SFTP.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.URLopener(...).retrieve("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
    - pattern: $OPENERDIRECTOR.retrieve("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
    - pattern: "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.retrieve($URL,\
        \ ...)\n"
  - pattern: "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.URLopener(...).retrieve($URL,\
      \ ...)\n"
  - patterns:
    - pattern-inside: "def $FUNC(..., $URL = \"=~/[Ff][Tt][Pp]://.*/\", ...):\n  ...\n"
    - pattern-either:
      - pattern: urllib.request.URLopener(...).retrieve($URL, ...)
      - patterns:
        - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
        - pattern: $OPENERDIRECTOR.retrieve($URL, ...)
  severity: WARNING
- fix-regex:
    count: 1
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  id: insecure-urlopener-open
  languages:
  - python
  message: Detected an unsecured transmission channel. 'URLopener.open(...)' is being
    used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.URLopener(...).open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
    - pattern: $OPENERDIRECTOR.open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
    - pattern: "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL,\
        \ ...)\n"
  - pattern: "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.URLopener(...).open($URL,\
      \ ...)\n"
  - patterns:
    - pattern-inside: "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n\
        \  ...\n"
    - pattern-either:
      - pattern: urllib.request.URLopener(...).open($URL, ...)
      - patterns:
        - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
        - pattern: $OPENERDIRECTOR.open($URL, ...)
  severity: WARNING
- id: insecure-urlopen-ftp
  languages:
  - python
  message: Detected 'urllib.urlopen()' using 'ftp://'. This request will not be encrypted.
    Consider using SFTP instead. urllib does not support SFTP, so consider switching
    to a library which supports SFTP.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.urlopen("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.urlopen($URL,\
      \ ...)\n"
  - pattern: "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.urlopen($URL,\
      \ ...)"
  severity: WARNING
- id: insecure-urlopener-open-ftp
  languages:
  - python
  message: Detected an insecure transmission channel. 'URLopener.open(...)' is being
    used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider
    using a library which supports SFTP.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.URLopener(...).open("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
    - pattern: $OPENERDIRECTOR.open("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
    - pattern: "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL,\
        \ ...)\n"
  - pattern: "$URL = \"=~/[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.URLopener(...).open($URL,\
      \ ...)\n"
  - patterns:
    - pattern-inside: "def $FUNC(..., $URL = \"=~/[Ff][Tt][Pp]://.*/\", ...):\n  ...\n"
    - pattern-either:
      - pattern: urllib.request.URLopener(...).open($URL, ...)
      - patterns:
        - pattern-inside: "$OPENERDIRECTOR = urllib.request.URLopener(...)\n...\n"
        - pattern: $OPENERDIRECTOR.open($URL, ...)
  severity: WARNING
- id: insecure-request-object-ftp
  languages:
  - python
  message: Detected a 'urllib.request.Request()' object using an insecure transport
    protocol, 'ftp://'. This connection will not be encrypted. Consider using SFTP
    instead. urllib does not support SFTP natively, so consider using a library which
    supports SFTP.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.Request
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.Request("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.Request($URL,\
      \ ...)\n"
  - pattern: "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n  ...\n  urllib.request.Request($URL,\
      \ ...)"
  severity: WARNING
- fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  id: insecure-urlopen
  languages:
  - python
  message: Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted.
    Use 'https://' instead.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.urlopen("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - pattern: "$URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\"\n...\nurllib.request.urlopen($URL,\
      \ ...)\n"
  - pattern: "def $FUNC(..., $URL = \"=~/[Hh][Tt][Tt][Pp]://.*/\", ...):\n  ...\n\
      \  urllib.request.urlopen($URL, ...)\n"
  severity: WARNING
- id: insecure-openerdirector-open-ftp
  languages:
  - python
  message: Detected an unsecured transmission channel. 'OpenerDirector.open(...)'
    is being used with 'ftp://'. Information sent over this connection will be unencrypted.
    Consider using SFTP instead. urllib does not support SFTP, so consider a library
    which supports SFTP.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open
    subcategory:
    - audit
    technology:
    - urllib
  pattern-either:
  - pattern: urllib.request.OpenerDirector(...).open("=~/^[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
    - pattern: $OPENERDIRECTOR.open("=~/^[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n...\n"
    - pattern: "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\n$OPENERDIRECTOR.open($URL,\
        \ ...)\n"
  - pattern: "$URL = \"=~/^[Ff][Tt][Pp]://.*/\"\n...\nurllib.request.OpenerDirector(...).open($URL,\
      \ ...)\n"
  - patterns:
    - pattern-inside: "def $FUNC(..., $URL = \"=~/^[Ff][Tt][Pp]://.*/\", ...):\n \
        \ ...\n"
    - pattern-either:
      - pattern: urllib.request.OpenerDirector(...).open($URL, ...)
      - patterns:
        - pattern-inside: "$OPENERDIRECTOR = urllib.request.OpenerDirector(...)\n\
            ...\n"
        - pattern: $OPENERDIRECTOR.open($URL, ...)
  severity: WARNING
- id: python-debugger-found
  languages:
  - python
  message: Importing the python debugger; did you mean to leave this in?
  metadata:
    category: best-practice
    technology:
    - python
  pattern-either:
  - pattern: import pdb
  - pattern: pdb.set_trace()
  severity: WARNING
- id: logging-error-without-handling
  languages:
  - python
  message: Errors should only be logged when handled. The code logs the error and
    propogates the exception, consider reducing the level to warning or info.
  metadata:
    category: best-practice
    technology:
    - python
  patterns:
  - pattern-inside: "try:\n  ...\nexcept ...:\n  ...\n...\n"
  - pattern-either:
    - pattern: "logger.$FUNC(...)\n...\nraise\n"
    - pattern: "logger.$FUNC(...)\n...\nraise $EX\n"
    - pattern: "logger.$FUNC(...)\n...\nraise $EX from $EX2\n"
  - metavariable-regex:
      metavariable: $FUNC
      regex: (error|exception)
  severity: WARNING
- id: unspecified-open-encoding
  languages:
  - python
  message: Missing 'encoding' parameter. 'open()' uses device locale encodings by
    default, corrupting files with special characters. Specify the encoding to ensure
    cross-platform support when opening files in text mode (e.g. encoding="utf-8").
  metadata:
    category: best-practice
    references:
    - https://www.python.org/dev/peps/pep-0597/
    - https://docs.python.org/3/library/functions.html#open
    technology:
    - python
  patterns:
  - pattern-inside: open(...)
  - pattern-not: open(..., encoding="...", ...)
  - pattern-not: open($F, "...", $B, "...", ...)
  - pattern-either:
    - pattern: open($FILE)
    - patterns:
      - pattern: open($FILE, ...)
      - pattern-not: open($FILE, $M, ...)
      - pattern-not-regex: open\(.*(?:encoding|mode)=.*\)
    - patterns:
      - pattern: open($FILE, $MODE, ...)
      - metavariable-regex:
          metavariable: $MODE
          regex: (?!.*b.*)
    - patterns:
      - pattern: open($FILE, ..., mode=$MODE, ...)
      - metavariable-regex:
          metavariable: $MODE
          regex: (?!.*b.*)
  severity: WARNING
- id: hardcoded-tmp-path
  languages:
  - python
  message: Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile'
    instead.
  metadata:
    category: best-practice
    references:
    - https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile
    technology:
    - python
  pattern: open("=~/^\/tmp.*/", ...)
  severity: WARNING
- id: open-never-closed
  languages:
  - python
  message: file object opened without corresponding close
  metadata:
    category: best-practice
    technology:
    - python
  patterns:
  - pattern-not-inside: "$F = open(...)\n...\n$F.close()\n"
  - pattern-not-inside: "$F = io.open(...)\n...\n$F.close()\n"
  - pattern-not-inside: "$F = tarfile.open(...)\n...\n$F.close()\n"
  - pattern-not-inside: "$F = ZipFile.open(...)\n...\n$F.close()\n"
  - pattern-not-inside: "$F = tempfile.TemporaryFile(...)\n...\n$F.close()\n"
  - pattern-not-inside: "$F = tempfile.NamedTemporaryFile(...)\n...\n$F.close()\n"
  - pattern-not-inside: "$F = tempfile.SpooledTemporaryFile(...)\n...\n$F.close()\n"
  - pattern-not-inside: "$F = open(...)\n...\ntry:\n    ...\nfinally:\n    $F.close()\n"
  - pattern-not-inside: "$F = io.open(...)\n...\ntry:\n    ...\nfinally:\n    $F.close()\n"
  - pattern-not-inside: "$F = tarfile.open(...)\n...\ntry:\n    ...\nfinally:\n  \
      \  $F.close()\n"
  - pattern-not-inside: "$F = ZipFile.open(...)\n...\ntry:\n    ...\nfinally:\n  \
      \  $F.close()\n"
  - pattern-not-inside: "$F = tempfile.TemporaryFile(...)\n...\ntry:\n    ...\nfinally:\n\
      \    $F.close()\n"
  - pattern-not-inside: "$F = tempfile.NamedTemporaryFile(...)\n...\ntry:\n    ...\n\
      finally:\n    $F.close()\n"
  - pattern-not-inside: "$F = tempfile.SpooledTemporaryFile(...)\n...\ntry:\n    ...\n\
      finally:\n    $F.close()\n"
  - pattern-either:
    - pattern: $F = open(...)
    - pattern: $F = io.open(...)
    - pattern: $F = tarfile.open(...)
    - pattern: $F = ZipFile.open(...)
    - pattern: $F = tempfile.TemporaryFile(...)
    - pattern: $F = tempfile.NamedTemporaryFile(...)
    - pattern: $F = tempfile.SpooledTemporaryFile(...)
  severity: ERROR
- id: arbitrary-sleep
  languages:
  - python
  message: time.sleep() call; did you mean to leave this in?
  metadata:
    category: best-practice
    technology:
    - python
  patterns:
  - pattern-not: time.sleep($F(...))
  - pattern-either:
    - pattern: "time.sleep($X: int)\n"
    - pattern: "time.sleep($X: float)\n"
  severity: ERROR
- id: missing-hash-with-eq
  languages:
  - python
  message: 'Class `$A` has defined `__eq__` which means it should also have defined
    `__hash__`; '
  metadata:
    category: best-practice
    technology:
    - python
  patterns:
  - pattern-not-inside: "class A(...):\n    ...\n    def __hash__(self):\n       \
      \ ...\n    ...\n    def __eq__(self, $O):\n        ...\n"
  - pattern: "class A(...):\n  ...\n  def __eq__(self, $O): ...\n  ...\n"
  severity: WARNING
- id: pass-body-fn
  languages:
  - python
  message: '`pass` is the body of function $X. Consider removing this or raise NotImplementedError()
    if this is a TODO'
  metadata:
    category: best-practice
    technology:
    - python
  patterns:
  - pattern-not-inside: "def __init__(self, ...):\n    ...\n"
  - pattern-not-inside: "class $A:\n     ...\n"
  - pattern: "def $X(...):\n    pass\n"
  severity: WARNING
- id: pass-body-range
  languages:
  - python
  message: '`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError()
    if this is a TODO'
  metadata:
    category: best-practice
    technology:
    - python
  pattern: "for $X in $Y:\n    pass\n"
  severity: WARNING
- id: list-modify-while-iterate
  languages:
  - python
  message: It appears that `$LIST` is a list that is being modified while in a for
    loop. This will likely cause a runtime error or an infinite loop.
  metadata:
    category: correctness
    technology:
    - python
  pattern-either:
  - pattern: "for $ELEMENT in $LIST:\n  ...\n  $LIST.pop(...)\n"
  - pattern: "for $ELEMENT in $LIST:\n  ...\n  $LIST.push(...)\n"
  - pattern: "for $ELEMENT in $LIST:\n  ...\n  $LIST.append(...)\n"
  - pattern: "for $ELEMENT in $LIST:\n  ...\n  $LIST.extend(...)\n"
  severity: ERROR
- id: pdb-remove
  languages:
  - python
  message: pdb is an interactive debugging tool and you may have forgotten to remove
    it before committing your code
  metadata:
    category: correctness
    technology:
    - python
  pattern-either:
  - pattern: pdb.$X(...)
  - pattern: pdb.Pdb.$X(...)
  severity: WARNING
- id: useless-eqeq
  languages:
  - python
  message: 'This expression is always True: `$X == $X` or `$X != $X`. If testing for
    floating point NaN, use `math.isnan($X)`, or `cmath.isnan($X)` if the number is
    complex.'
  metadata:
    category: correctness
    technology:
    - python
  patterns:
  - pattern-not-inside: "def __eq__(...):\n    ...\n"
  - pattern-not-inside: "def __cmp__(...):\n    ...\n"
  - pattern-not-inside: assert(...)
  - pattern-not-inside: assert ..., ...
  - pattern-not-inside: assertTrue(...)
  - pattern-not-inside: assertFalse(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  severity: INFO
- id: dict-del-while-iterate
  languages:
  - python
  message: 'It appears that `$DICT[$KEY]` is a dict with items being deleted while
    in a for loop. This is usually a bad idea and will likely lead to a RuntimeError:
    dictionary changed size during iteration'
  metadata:
    category: correctness
    references:
    - https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
    technology:
    - python
  pattern-either:
  - pattern: "for $KEY, $VALUE in $DICT.items():\n    ...\n    del $DICT[$KEY]\n"
  - pattern: "for $KEY in $DICT.keys():\n    ...\n    del $DICT[$KEY]\n"
  severity: WARNING
- id: no-strings-as-booleans
  languages:
  - python
  message: Using strings as booleans in Python has unexpected results. `"one" and
    "two"` will return "two". `"one" or "two"` will return "one". In Python, strings
    are truthy, and strings with a non-zero length evaluate to True.
  metadata:
    category: correctness
    technology:
    - python
  pattern-either:
  - pattern: "if <... \"...\" and ... ...>:\n    ...\n"
  - pattern: "if <... \"...\" or ... ...>:\n    ...\n"
  - patterns:
    - pattern-not: "if $X in \"...\":\n  ...\n"
    - pattern: "if \"...\":\n    ...\n"
  severity: ERROR
- id: pytest-assert_match-after-path-patch
  languages:
  - python
  message: snapshot.assert_match makes use of pathlib to create files. Patching $METHOD
    may result in unexpected snapshot behavior
  metadata:
    category: correctness
    references:
    - https://github.com/returntocorp/semgrep/pull/5459
    - https://pypi.org/project/pytest-snapshot/
    technology:
    - python
  patterns:
  - pattern-inside: "import pytest\n...\n"
  - pattern-either:
    - pattern-inside: "mocker.patch(\"pathlib.Path\", $MOCKED_VALUE)\n...\n"
    - pattern-inside: "mocker.patch.object(pathlib.Path, $METHOD, $MOCKED_VALUE)\n\
        ...\n"
  - pattern: snapshot.assert_match(...)
  severity: WARNING
- id: tempfile-insecure
  languages:
  - python
  message: 'Use tempfile.NamedTemporaryFile instead. From the official Python documentation:
    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file
    that did not exist at some point, but by the time you get around to creating it,
    someone else may have beaten you to the punch.'
  metadata:
    category: correctness
    technology:
    - python
  pattern: tempfile.mktemp(...)
  severity: ERROR
- id: tempfile-without-flush
  languages:
  - python
  message: Using '$F.name' without '.flush()' or '.close()' may cause an error because
    the file may not exist when '$F.name' is used. Use '.flush()' or close the file
    before using '$F.name'.
  metadata:
    category: correctness
    technology:
    - python
  pattern-either:
  - patterns:
    - pattern-not-inside: "$F = tempfile.NamedTemporaryFile(...)\n...\n$F.write(...)\n\
        ...\n$F.flush()\n...\n$F.name\n"
    - pattern-not-inside: "$F = tempfile.NamedTemporaryFile(...)\n...\n$F.write(...)\n\
        ...\n$F.close()\n...\n$F.name\n"
    - pattern-not-inside: "$F = tempfile.NamedTemporaryFile(..., delete=False, ...)\n\
        ...\n$F.close()\n...\n$F.name\n"
    - pattern-inside: "$F = tempfile.NamedTemporaryFile(...)\n...\n"
    - pattern: "$F.name\n"
  - patterns:
    - pattern-not-inside: "with tempfile.NamedTemporaryFile(...) as $F:\n    ...\n\
        \    $F.write(...)\n    ...\n    $F.flush()\n    ...\n    $F.name\n"
    - pattern-not-inside: "with tempfile.NamedTemporaryFile(...) as $F:\n    ...\n\
        \    $F.write(...)\n    ...\n    $F.close()\n    ...\n    $F.name\n"
    - pattern-not-inside: "with tempfile.NamedTemporaryFile(...) as $F:\n    ...\n\
        \    $MODULE.dump(..., $F, ...)\n    ...\n    $F.flush()\n    ...\n    $F.name\n"
    - pattern-not-inside: "with tempfile.NamedTemporaryFile(...) as $F:\n    ...\n\
        \    $MODULE.dump(..., $F, ...)\n    ...\n    $F.close()\n    ...\n    $F.name\n"
    - pattern-inside: "with tempfile.NamedTemporaryFile(...) as $F:\n    ...\n"
    - pattern: "$F.name\n"
  severity: ERROR
- id: identical-is-comparison
  languages:
  - python
  message: Found identical comparison using is. Ensure this is what you intended.
  metadata:
    category: correctness
    technology:
    - python
  pattern: $S is $S
  severity: ERROR
- id: string-is-comparison
  languages:
  - python
  message: Found string comparison using 'is' operator. The 'is' operator is for reference
    equality, not value equality, and therefore should not be used to compare strings.
    For more information, see https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator"
  metadata:
    category: correctness
    technology:
    - python
  patterns:
  - pattern-not: $S is None
  - pattern-not: type($X) is $T
  - pattern-not: $S is True
  - pattern-not: $S is False
  - pattern-not: $S is ""
  - pattern-either:
    - pattern: $S is "..."
    - pattern: '"..." is $S'
  severity: ERROR
- id: python37-compatibility-importlib
  languages:
  - python
  message: source_hash' is only available on Python 3.7+. This does not work in lower
    versions, and therefore is not backwards compatible. Instead, use another hash
    function.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: importlib.source_hash()
  severity: ERROR
- id: python37-compatibility-importlib2
  languages:
  - python
  message: Found 'importlib.resources', which is a module only available on Python
    3.7+. This does not work in lower versions, and therefore is not backwards compatible.
    Use importlib_resources instead for older Python versions.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: import importlib.resources
  severity: ERROR
- id: python37-compatibility-httpconn
  languages:
  - python
  message: Found usage of the 'blocksize' argument in a HTTPConnection call. This
    is only available on Python 3.7+ and is therefore not backwards compatible. Remove
    this in order for this code to work in Python 3.6 and below.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: http.client.HTTPConnection(blocksize=$X,...)
  severity: ERROR
- id: python37-compatibility-httpsconn
  languages:
  - python
  message: Found usage of the 'blocksize' argument in a HTTPSConnection call. This
    is only available on Python 3.7+ and is therefore not backwards compatible. Remove
    this in order for this code to work in Python 3.6 and below.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: http.client.HTTPSConnection(blocksize=$X,...)
  severity: ERROR
- id: python37-compatibility-importlib3
  languages:
  - python
  message: Found usage of 'importlib.abc.ResourceReader'. This module is only available
    on Python 3.7+ and is therefore not backwards compatible. Instead, use another
    loader.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: import importlib.abc.ResourceReader
  severity: ERROR
- id: python37-compatibility-textiowrapper
  languages:
  - python
  message: Found usage of 'importlib.abc.ResourceReader'. This module is only available
    on Python 3.7+ and is therefore not backwards compatible. Instead, use another
    loader.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: TextIOWrapper.reconfigure(...)
  severity: ERROR
- id: python37-compatibility-ipv6network1
  languages:
  - python
  message: IPv6Network.subnet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the subnet is in 'subnets'.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: ipaddress.IPv6Network.subnet_of($X)
  severity: ERROR
- id: python37-compatibility-ipv6network2
  languages:
  - python
  message: IPv6Network.supernet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the supernet is in 'supernet'.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: ipaddress.IPv6Network.supernet_of($X)
  severity: ERROR
- id: python37-compatibility-ipv4network1
  languages:
  - python
  message: IPv4Network.subnet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the subnet is in 'subnets'.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: ipaddress.IPv4Network.subnet_of($X)
  severity: ERROR
- id: python37-compatibility-ipv4network2
  languages:
  - python
  message: IPv4Network.supernet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the supernet is in 'supernet'.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: ipaddress.IPv4Network.supernet_of($X)
  severity: ERROR
- id: python37-compatibility-locale1
  languages:
  - python
  message: Found usage of the 'monetary' argument in a function call of 'locale.format_string'.
    This is only available on Python 3.7+ and is therefore not backwards compatible.
    Instead, remove the 'monetary' argument.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: locale.format_string(monetary=$X, ...)
  severity: ERROR
- id: python37-compatibility-math1
  languages:
  - python
  message: math.remainder is only available on Python 3.7+ and is therefore not backwards
    compatible. Instead, use math.fmod() or calculate $X - n* $Y.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: math.remainder($X, $Y)
  severity: ERROR
- id: python37-compatibility-multiprocess1
  languages:
  - python
  message: multiprocessing.Process.close() is only available on Python 3.7+ and is
    therefore not backwards compatible. Instead, use join().
  metadata:
    category: compatibility
    technology:
    - python
  pattern: multiprocessing.Process.close()
  severity: ERROR
- id: python37-compatibility-multiprocess2
  languages:
  - python
  message: multiprocessing.Process.kill() is only available on Python 3.7+ and is
    therefore not backwards compatible. Instead, use terminate().
  metadata:
    category: compatibility
    technology:
    - python
  pattern: multiprocessing.Process.kill()
  severity: ERROR
- id: python37-compatibility-os1
  languages:
  - python
  message: os.preadv() is only available on Python 3.7+ and is therefore not backwards
    compatible. Instead, use a combination of os.readv() and os.pread().
  metadata:
    category: compatibility
    technology:
    - python
  pattern: os.preadv(...)
  severity: ERROR
- id: python37-compatibility-os2-ok2
  languages:
  - python
  message: os.pwritev() is only available on Python 3.3+ and is therefore not backwards
    compatible. Instead, use a combination of pwrite() and writev().
  metadata:
    category: compatibility
    technology:
    - python
  patterns:
  - pattern-not-inside: "if hasattr(os, 'pwritev'):\n    ...\n"
  - pattern: os.pwritev(...)
  severity: ERROR
- id: python37-compatibility-pdb
  languages:
  - python
  message: pdb.set_trace() with the header argument is only available on Python 3.7+
    and is therefore not backwards compatible. Instead, use set_trace() without the
    header argument.
  metadata:
    category: compatibility
    technology:
    - python
  pattern: pdb.set_trace(header=$X, ...)
  severity: ERROR
- id: python36-compatibility-ssl
  languages:
  - python
  message: this function is only available on Python 3.6+
  metadata:
    category: compatibility
    technology:
    - python
  pattern: ssl.get_ciphers()
  severity: ERROR
- id: python36-compatibility-Popen1
  languages:
  - python
  message: the `errors` argument to Popen is only available on Python 3.6+
  metadata:
    category: compatibility
    technology:
    - python
  pattern: subprocess.Popen(errors=$X, ...)
  severity: ERROR
- id: python36-compatibility-Popen2
  languages:
  - python
  message: the `encoding` argument to Popen is only available on Python 3.6+
  metadata:
    category: compatibility
    technology:
    - python
  pattern: subprocess.Popen(encoding=$X, ...)
  severity: ERROR
- id: dangerous-asyncio-shell
  languages:
  - python
  message: Detected asyncio subprocess function with argument tainted by `event` object.
    If this data can be controlled by a malicious actor, it may be an instance of
    command injection. Audit the use of this call to ensure it is not controllable
    by an external resource. You may consider using 'shlex.escape()'.
  metadata:
    asvs:
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.python.org/3/library/asyncio-subprocess.html
    - https://docs.python.org/3/library/shlex.html
    subcategory:
    - vuln
    technology:
    - python
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: $LOOP.subprocess_shell($PROTOCOL, $CMD)
      - pattern: asyncio.subprocess.create_subprocess_shell($CMD, ...)
      - pattern: asyncio.create_subprocess_shell($CMD, ...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: ERROR
- id: dynamodb-filter-injection
  languages:
  - python
  message: Detected DynamoDB query filter that is tainted by `$EVENT` object. This
    could lead to NoSQL injection if the variable is user-controlled and not properly
    sanitized. Explicitly assign query params instead of passing data from `$EVENT`
    directly to DynamoDB client.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    references:
    - https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac
    subcategory:
    - vuln
    technology:
    - python
    - boto3
    - aws-lambda
    - dynamodb
  mode: taint
  pattern-sanitizers:
  - patterns:
    - pattern: "{...}\n"
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: $TABLE.scan(..., ScanFilter = $SINK, ...)
      - pattern: $TABLE.query(..., QueryFilter = $SINK, ...)
    - pattern-either:
      - patterns:
        - pattern-inside: "$TABLE = $DB.Table(...)\n...\n"
        - pattern-inside: "$DB = boto3.resource('dynamodb', ...)\n...\n"
      - pattern-inside: "$TABLE = boto3.client('dynamodb', ...)\n...\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: ERROR
- id: psycopg-sqli
  languages:
  - python
  message: "Detected SQL statement that is tainted by `event` object. This could lead\
    \ to SQL injection if the variable is user-controlled and not properly sanitized.\
    \ In order to prevent SQL injection, use parameterized queries or prepared statements\
    \ instead. You can use parameterized statements like so: `cursor.execute('SELECT\
    \ * FROM projects WHERE status = %s', 'active')`"
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.psycopg.org/docs/cursor.html#cursor.execute
    - https://www.psycopg.org/docs/cursor.html#cursor.executemany
    - https://www.psycopg.org/docs/cursor.html#cursor.mogrify
    subcategory:
    - vuln
    technology:
    - aws-lambda
    - psycopg
    - psycopg2
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $CURSOR.execute($QUERY,...)
      - pattern: $CURSOR.executemany($QUERY,...)
      - pattern: $CURSOR.mogrify($QUERY,...)
    - pattern-inside: "import psycopg2\n...\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: dangerous-asyncio-create-exec
  languages:
  - python
  message: Detected 'create_subprocess_exec' function with argument tainted by `event`
    object. If this data can be controlled by a malicious actor, it may be an instance
    of command injection. Audit the use of this call to ensure it is not controllable
    by an external resource. You may consider using 'shlex.escape()'.
  metadata:
    asvs:
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec
    - https://docs.python.org/3/library/shlex.html
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: asyncio.create_subprocess_exec($PROG, $CMD, ...)
      - pattern: asyncio.create_subprocess_exec($PROG, [$CMD, ...], ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, $CMD, ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, [$CMD, ...], ...)
      - pattern: asyncio.create_subprocess_exec($PROG, "=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...)
      - pattern: asyncio.create_subprocess_exec($PROG, ["=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...], ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, "=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, ["=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...], ...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: ERROR
- id: dangerous-system-call
  languages:
  - python
  message: Detected `os` function with argument tainted by `event` object. This is
    dangerous if external data can reach this function call because it allows a malicious
    actor to execute commands. Use the 'subprocess' module instead, which is easier
    to use without accidentally exposing a command injection vulnerability.
  metadata:
    asvs:
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: os.system($CMD,...)
      - pattern: os.popen($CMD,...)
      - pattern: os.popen2($CMD,...)
      - pattern: os.popen3($CMD,...)
      - pattern: os.popen4($CMD,...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: ERROR
- id: pymssql-sqli
  languages:
  - python
  message: "Detected SQL statement that is tainted by `event` object. This could lead\
    \ to SQL injection if the variable is user-controlled and not properly sanitized.\
    \ In order to prevent SQL injection, use parameterized queries or prepared statements\
    \ instead. You can use parameterized statements like so: `cursor.execute('SELECT\
    \ * FROM projects WHERE status = %s', 'active')`"
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://pypi.org/project/pymssql/
    subcategory:
    - vuln
    technology:
    - aws-lambda
    - pymssql
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern: $CURSOR.execute($QUERY,...)
    - pattern-inside: "import pymssql\n...\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: tainted-html-string
  languages:
  - python
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. To be sure this is safe, check that the HTML
    is rendered safely. Otherwise, use templates which will safely render HTML instead.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    technology:
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$HTMLSTR" % ...'
          - pattern: '"$HTMLSTR".format(...)'
          - pattern: '"$HTMLSTR" + ...'
          - pattern: f"$HTMLSTR{...}..."
      - patterns:
        - pattern-inside: "$HTML = \"$HTMLSTR\"\n...\n"
        - pattern-either:
          - pattern: $HTML % ...
          - pattern: $HTML.format(...)
          - pattern: $HTML + ...
    - metavariable-pattern:
        language: generic
        metavariable: $HTMLSTR
        pattern: <$TAG ...
    - pattern-not-inside: "print(...)\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: dangerous-asyncio-exec
  languages:
  - python
  message: Detected subprocess function '$LOOP.subprocess_exec' with argument tainted
    by `event` object. If this data can be controlled by a malicious actor, it may
    be an instance of command injection. Audit the use of this call to ensure it is
    not controllable by an external resource. You may consider using 'shlex.escape()'.
  metadata:
    asvs:
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec
    - https://docs.python.org/3/library/shlex.html
    subcategory:
    - vuln
    technology:
    - python
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: $LOOP.subprocess_exec($PROTOCOL, $CMD, ...)
      - pattern: $LOOP.subprocess_exec($PROTOCOL, [$CMD, ...], ...)
      - pattern: $LOOP.subprocess_exec($PROTOCOL, "=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...)
      - pattern: $LOOP.subprocess_exec($PROTOCOL, ["=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...], ...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: ERROR
- id: tainted-sql-string
  languages:
  - python
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    subcategory:
    - vuln
    technology:
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "\"$SQLSTR\" + ...\n"
      - pattern: "\"$SQLSTR\" % ...\n"
      - pattern: "\"$SQLSTR\".format(...)\n"
      - pattern: "f\"$SQLSTR{...}...\"\n"
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*=
    - pattern-not-inside: "print(...)\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: ERROR
- id: mysql-sqli
  languages:
  - python
  message: "Detected SQL statement that is tainted by `event` object. This could lead\
    \ to SQL injection if the variable is user-controlled and not properly sanitized.\
    \ In order to prevent SQL injection, use parameterized queries or prepared statements\
    \ instead. You can use parameterized statements like so: `cursor.execute('SELECT\
    \ * FROM projects WHERE status = %s', ('active'))`"
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html
    - https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html
    subcategory:
    - vuln
    technology:
    - aws-lambda
    - mysql
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $CURSOR.execute($QUERY,...)
      - pattern: $CURSOR.executemany($QUERY,...)
    - pattern-either:
      - pattern-inside: "import mysql\n...\n"
      - pattern-inside: "import mysql.cursors\n...\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: tainted-pickle-deserialization
  languages:
  - python
  message: Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    subcategory:
    - vuln
    technology:
    - python
    - aws-lambda
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: pickle.load($SINK,...)
      - pattern: pickle.loads($SINK,...)
      - pattern: _pickle.load($SINK,...)
      - pattern: _pickle.loads($SINK,...)
      - pattern: cPickle.load($SINK,...)
      - pattern: cPickle.loads($SINK,...)
      - pattern: dill.load($SINK,...)
      - pattern: dill.loads($SINK,...)
      - pattern: shelve.open($SINK,...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: tainted-code-exec
  languages:
  - python
  message: Detected the use of `exec/eval`.This can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    asvs:
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      version: '4'
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    technology:
    - python
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: eval($CODE, ...)
      - pattern: exec($CODE, ...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: sqlalchemy-sqli
  languages:
  - python
  message: "Detected SQL statement that is tainted by `event` object. This could lead\
    \ to SQL injection if the variable is user-controlled and not properly sanitized.\
    \ In order to prevent SQL injection, use parameterized queries or prepared statements\
    \ instead. You can use parameterized statements like so: `cursor.execute('SELECT\
    \ * FROM projects WHERE status = ?', 'active')`"
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute
    subcategory:
    - vuln
    technology:
    - aws-lambda
    - sqlalchemy
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern: $CURSOR.execute($QUERY,...)
    - pattern-inside: "import sqlalchemy\n...\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: pymysql-sqli
  languages:
  - python
  message: "Detected SQL statement that is tainted by `event` object. This could lead\
    \ to SQL injection if the variable is user-controlled and not properly sanitized.\
    \ In order to prevent SQL injection, use parameterized queries or prepared statements\
    \ instead. You can use parameterized statements like so: `cursor.execute('SELECT\
    \ * FROM projects WHERE status = %s', ('active'))`"
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command\
      \ ('SQL Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://pypi.org/project/PyMySQL/#id4
    subcategory:
    - vuln
    technology:
    - aws-lambda
    - pymysql
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern: $CURSOR.execute($QUERY,...)
    - pattern-either:
      - pattern-inside: "import pymysql\n...\n"
      - pattern-inside: "import pymysql.cursors\n...\n"
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: "def $HANDLER(event, context):\n  ...\n"
  severity: WARNING
- id: attr-mutable-initializer
  languages:
  - python
  message: 'Unsafe usage of mutable initializer with attr.s decorator. Multiple instances
    of this class will re-use the same data structure, which is likely not the desired
    behavior. Consider instead: replace assignment to mutable initializer (ex. dict()
    or {}) with attr.ib(factory=type) where type is dict, set, or list'
  metadata:
    category: correctness
    technology:
    - attr
  patterns:
  - pattern-not-inside: "def $Y(...):\n  ...\n"
  - pattern-not-inside: "def $Y(...) -> $TYPE:\n  ...\n"
  - pattern-either:
    - pattern-inside: "@attr.s(...,auto_attribs=True, ...)\nclass $X(...):\n  ...\n"
    - pattern-inside: "@attrs.define\nclass $X(...):\n  ...\n"
  - pattern-either:
    - pattern: "$M = {...}\n"
    - pattern: $M = [...]
    - pattern: $M = list(...)
    - pattern: $M = set(...)
    - pattern: $M = dict(...)
  severity: WARNING
- id: insecure-deserialization
  languages:
  - python
  message: Detected the use of an insecure deserialization library in a Flask route.
    These libraries are prone to code execution vulnerabilities. Ensure user data
    does not enter this function. To fix this, try to avoid serializing whole objects.
    Consider instead using a serializer such as JSON.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.python.org/3/library/pickle.html
    subcategory:
    - audit
    technology:
    - flask
  patterns:
  - pattern-inside: "@app.route(...)\ndef $X(...):\n  ...\n"
  - pattern-not: $MODULE.$FUNC("...")
  - pattern-not: $MODULE.$FUNC(open("...", ...))
  - pattern-either:
    - pattern: pickle.$FUNC(...)
    - pattern: _pickle.$FUNC(...)
    - pattern: cPickle.$FUNC(...)
    - pattern: dill.$FUNC(...)
    - pattern: shelve.$FUNC(...)
    - pattern: yaml.load(...)
  severity: ERROR
- id: dangerous-template-string
  languages:
  - python
  message: Found a template created with string formatting. This is susceptible to
    server-side template injection and cross-site scripting attacks.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static\
      \ Code Injection')"
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html
    - https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - pattern: "$V = \"...\".format(...)\n...\nflask.render_template_string($V, ...)\n"
  - pattern: "$V = \"...\".format(...)\n...\nreturn flask.render_template_string($V,\
      \ ...), $MORE\n"
  - pattern: "$V = \"...\" % $S\n...\nflask.render_template_string($V, ...)\n"
  - pattern: "$V = \"...\" % $S\n...\nreturn flask.render_template_string($V, ...),\
      \ $MORE\n"
  - pattern: "$V = \"...\"\n...\n$V += $O\n...\nflask.render_template_string($V, ...)\n"
  - pattern: "$V = \"...\"\n...\n$V += $O\n...\nreturn flask.render_template_string($V,\
      \ ...), $MORE\n"
  - pattern: "$V = f\"...{$X}...\"\n...\nflask.render_template_string($V, ...)\n"
  - pattern: "$V = f\"...{$X}...\"\n...\nreturn flask.render_template_string($V, ...),\
      \ $CODE\n"
  severity: ERROR
- id: unescaped-template-extension
  languages:
  - python
  message: Flask does not automatically escape Jinja templates unless they have .html,
    .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm,
    .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    for more information.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    - https://blog.r2c.dev/2020/bento-check-unescaped-template-extensions-in-flask/
    - https://bento.dev/checks/flask/unescaped-file-extension/
    source-rule-url: https://pypi.org/project/flake8-flask/
    subcategory:
    - audit
    technology:
    - flask
  patterns:
  - pattern-not: flask.render_template("=~/.+\.html$/", ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/", ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/", ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.html$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.xml$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.htm$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.xhtml$/", ...)
  - pattern-not: flask.render_template("=~/.+\.html$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.html$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/".format(...), ...)
  - pattern-not: flask.render_template($TEMPLATE)
  - pattern-either:
    - pattern: flask.render_template("...", ...)
    - pattern: flask.render_template($X + "...", ...)
    - pattern: flask.render_template("..." % $Y, ...)
    - pattern: flask.render_template("...".format(...), ...)
  severity: WARNING
- id: avoid_app_run_with_bad_host
  languages:
  - python
  message: Running flask app with host 0.0.0.0 could expose the server publicly.
  metadata:
    category: security
    confidence: HIGH
    cwe:
    - 'CWE-668: Exposure of Resource to Wrong Sphere'
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    technology:
    - flask
  pattern-either:
  - pattern: app.run(..., host="0.0.0.0", ...)
  - pattern: app.run(..., "0.0.0.0", ...)
  severity: WARNING
- id: render-template-string
  languages:
  - python
  message: Found a template created with string formatting. This is susceptible to
    server-side template injection and cross-site scripting attacks.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static\
      \ Code Injection')"
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html
    subcategory:
    - audit
    technology:
    - flask
  pattern: flask.render_template_string(...)
  severity: WARNING
- id: avoid_hardcoded_config_TESTING
  languages:
  - python
  message: Hardcoded variable `TESTING` detected. Use environment variables or config
    files instead
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-489: Active Debug Code'
    impact: LOW
    likelihood: LOW
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - pattern: $M.config['TESTING'] = True
  - pattern: $M.config['TESTING'] = False
  - pattern: $M.update(TESTING=True, ...)
  - pattern: $M.update(TESTING=False, ...)
  severity: WARNING
- id: avoid_hardcoded_config_SECRET_KEY
  languages:
  - python
  message: Hardcoded variable `SECRET_KEY` detected. Use environment variables or
    config files instead
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-489: Active Debug Code'
    impact: LOW
    likelihood: LOW
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - pattern: $M.update(SECRET_KEY="=~/.*/")
  - pattern: $M.config['SECRET_KEY'] = "=~/.*/"
  severity: ERROR
- id: avoid_hardcoded_config_ENV
  languages:
  - python
  message: Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment
    variable
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-489: Active Debug Code'
    impact: LOW
    likelihood: LOW
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - pattern: $M.update(ENV="=~/^development|production$/")
  - pattern: $M.config['ENV'] = "=~/^development|production$/"
  severity: WARNING
- id: avoid_hardcoded_config_DEBUG
  languages:
  - python
  message: Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment
    variable
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-489: Active Debug Code'
    impact: LOW
    likelihood: LOW
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - pattern: $M.update(DEBUG=True)
  - pattern: $M.update(DEBUG=False)
  - pattern: $M.config['DEBUG'] = True
  - pattern: $M.config['DEBUG'] = False
  severity: WARNING
- id: flask-wtf-csrf-disabled
  languages:
  - python
  message: Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://flask-wtf.readthedocs.io/en/stable/csrf.html
    subcategory:
    - audit
    technology:
    - flask
  pattern: $APP.config['WTF_CSRF_ENABLED'] = False
  severity: WARNING
- id: debug-enabled
  languages:
  - python
  message: Detected Flask app with debug=True. Do not deploy to production with this
    flag enabled as it will leak sensitive information. Instead, consider using Flask
    configuration variables or setting 'debug' using system environment variables.
  metadata:
    category: security
    confidence: HIGH
    cwe:
    - 'CWE-489: Active Debug Code'
    impact: MEDIUM
    likelihood: HIGH
    owasp: A06:2017 - Security Misconfiguration
    references:
    - https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/
    subcategory:
    - vuln
    technology:
    - flask
  patterns:
  - pattern-inside: "import flask\n...\n"
  - pattern: $APP.run(..., debug=True, ...)
  severity: WARNING
- id: directly-returned-format-string
  languages:
  - python
  message: Detected Flask route directly returning a formatted string. This is subject
    to cross-site scripting if user input can reach the string. Consider using the
    template engine instead and rendering pages with 'render_template()'.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    technology:
    - flask
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-not-inside: return "..."
    - pattern-either:
      - pattern: return "...".format(...)
      - pattern: return "..." % ...
      - pattern: return "..." + ...
      - pattern: return ... + "..."
      - pattern: return f"...{...}..."
      - patterns:
        - pattern: return $X
        - pattern-either:
          - pattern-inside: "$X = \"...\".format(...)\n...\n"
          - pattern-inside: "$X = \"...\" % ...\n...\n"
          - pattern-inside: "$X = \"...\" + ...\n...\n"
          - pattern-inside: "$X = ... + \"...\"\n...\n"
          - pattern-inside: "$X = f\"...{...}...\"\n...\n"
        - pattern-not-inside: "$X = \"...\"\n...\n"
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
      - pattern: $PARAM
    - pattern: "request.$FUNC.get(...)\n"
    - pattern: "request.$FUNC(...)\n"
    - pattern: request.$FUNC[...]
  severity: WARNING
- id: avoid_using_app_run_directly
  languages:
  - python
  message: top-level app.run(...) is ignored by flask. Consider putting app.run(...)
    behind a guard, like inside a function
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-668: Exposure of Resource to Wrong Sphere'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    technology:
    - flask
  patterns:
  - pattern-not-inside: "if __name__ == '__main__':\n  ...\n"
  - pattern-not-inside: "def $X(...):\n  ...\n"
  - pattern: app.run(...)
  severity: WARNING
- id: host-header-injection-python
  languages:
  - python
  message: The `flask.request.host` is used to construct an HTTP request.  This can
    lead to host header injection issues. Vulnerabilities  that generally occur due
    to this issue are authentication bypasses,  password reset issues, Server-Side-Request-Forgery
    (SSRF), and many more.  It is recommended to validate the URL before passing it
    to a  request library, or using application logic such as authentication  or password
    resets.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - 'CWE-20: Improper Input Validation'
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: LOW
    references:
    - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    subcategory:
    - audit
    technology:
    - flask
  patterns:
  - pattern-either:
    - pattern: "$X = <... \"=~/.*http[s]*:///\" + flask.request.host ...>;\n"
    - pattern: "$X = <... \"=~/.*http[s]*:///\" + flask.request[\"host\"] ...>;\n"
    - pattern: "$Z = flask.request.host;\n...\n$X = <... \"=~/.*http[s]*:///\" + $Z\
        \ ...>;\n"
    - pattern: "$Z = flask.request[\"host\"];\n...\n$X = <... \"=~/.*http[s]*:///\"\
        \ + $Z ...>;\n"
  - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC():\n  ...\n"
  severity: INFO
- id: direct-use-of-jinja2
  languages:
  - python
  message: Detected direct use of jinja2. If not done properly, this may bypass HTML
    escaping which opens up the application to cross-site scripting (XSS) vulnerabilities.
    Prefer using the Flask method 'render_template()' and templates with a '.html'
    extension in order to prevent XSS.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://jinja.palletsprojects.com/en/2.11.x/api/#basics
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - pattern: jinja2.Environment(...)
  - pattern: jinja2.Template.render(...)
  - patterns:
    - pattern-inside: "$TEMPLATE = $ENV.get_template(...)\n...\n"
    - pattern: $TEMPLATE.render(...)
  - patterns:
    - pattern-inside: "$TEMPLATE = jinja2.Template(...)\n...\n"
    - pattern: $TEMPLATE.render(...)
  severity: WARNING
- id: template-href-var
  languages:
  - generic
  message: Detected a template variable used in an anchor tag with the 'href' attribute.
    This allows a malicious actor to input the 'javascript:' URI and is subject to
    cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL.
    You may also consider setting the Content Security Policy (CSP) header.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    - https://content-security-policy.com/
    subcategory:
    - audit
    technology:
    - flask
  paths:
    include:
    - '*.html'
  patterns:
  - pattern-inside: <a ...>
  - pattern-either:
    - pattern: href = {{ ... }}
    - pattern: href = "{{ ... }}"
    - pattern: href = '{{ ... }}'
  - pattern-not-inside: href = {{ url_for(...) ... }}
  - pattern-not-inside: href = "{{ url_for(...) ... }}"
  - pattern-not-inside: href = '{{ url_for(...) ... }}'
  severity: WARNING
- id: explicit-unescape-with-markup
  languages:
  - python
  message: Detected explicitly unescaped content using 'Markup()'. This permits the
    unescaped data to include unescaped HTML which could result in cross-site scripting.
    Ensure this data is not externally controlled, or consider rewriting to not use
    'Markup()'.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://tedboy.github.io/flask/generated/generated/flask.Markup.html
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - pattern: flask.Markup(...)
  - pattern: flask.Markup.unescape(...)
  - pattern: markupsafe.Markup(...)
  - pattern: $MARKUPOBJ.unescape()
  severity: WARNING
- fix: "=\"{{$...VAR}}\"\n"
  id: template-unquoted-attribute-var
  languages:
  - generic
  message: 'Detected a unquoted template variable as an attribute. If unquoted, a
    malicious actor could inject custom JavaScript handlers. To fix this, add quotes
    around the template expression, like this: "{{ $...VAR }}".'
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    subcategory:
    - audit
    technology:
    - flask
  paths:
    include:
    - '*.html'
    - '*.py'
  patterns:
  - pattern: ={{$...VAR}}
  - pattern-inside: "<$TAG ... >\n"
  - metavariable-pattern:
      metavariable: $...VAR
      pattern-either:
      - pattern: "request.$VALUE.get(...)\n"
      - pattern: "request.$VALUE['...']\n"
      - patterns:
        - pattern: $REQ
        - pattern-either:
          - pattern-inside: "$REQ = request.$VALUE.get(...)\n... \n"
          - pattern-inside: "$REQ = request.$VALUE['...']\n... \n"
  severity: WARNING
- id: template-autoescape-off
  languages:
  - regex
  message: Detected a segment of a Flask template where autoescaping is explicitly
    disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this
    segment. Ensure no user data is rendered here, otherwise this is a cross-site
    scripting (XSS) vulnerability, or turn autoescape on.
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site\
      \ Scripting')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping
    - https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    subcategory:
    - audit
    technology:
    - flask
  paths:
    include:
    - '*.html'
  pattern-regex: '{%\s*autoescape\s+false\s*%}'
  severity: WARNING
- id: subprocess-injection
  languages:
  - python
  message: Detected user input entering a `subprocess` call unsafely. This could result
    in a command injection vulnerability. An attacker could use this vulnerability
    to execute arbitrary commands on the host, which allows them to download malware,
    scan sensitive data, or run any command they wish on the server. Do not let users
    choose the command to run. In general, prefer to use Python API versions of system
    commands. If you must use subprocess, use a dictionary to allowlist a set of commands.
  metadata:
    category: security
    confidence: HIGH
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: MEDIUM
    likelihood: HIGH
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    subcategory:
    - vuln
    technology:
    - flask
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sanitizers:
  - patterns:
    - pattern: $DICT[$KEY]
    - focus-metavariable: $KEY
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: subprocess.$FUNC(...)
        - pattern-not: subprocess.$FUNC("...", ...)
        - pattern-not: subprocess.$FUNC(["...", ...], ...)
        - pattern-not-inside: "$CMD = [\"...\", ...]\n...\nsubprocess.$FUNC($CMD,\
            \ ...)\n"
      - patterns:
        - pattern: subprocess.$FUNC(["$SHELL", "-c", ...], ...)
        - metavariable-regex:
            metavariable: $SHELL
            regex: ^(sh|bash|ksh|csh|tcsh|zsh)$
      - patterns:
        - pattern: subprocess.$FUNC(["$INTERPRETER", ...], ...)
        - metavariable-regex:
            metavariable: $INTERPRETER
            regex: ^(python|python\d)$
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: flask.request.form.get(...)
        - pattern: flask.request.form[...]
        - pattern: flask.request.args.get(...)
        - pattern: flask.request.args[...]
        - pattern: flask.request.values.get(...)
        - pattern: flask.request.values[...]
        - pattern: flask.request.cookies.get(...)
        - pattern: flask.request.cookies[...]
        - pattern: flask.request.stream
        - pattern: flask.request.headers.get(...)
        - pattern: flask.request.headers[...]
        - pattern: flask.request.data
        - pattern: flask.request.full_path
        - pattern: flask.request.url
        - pattern: flask.request.json
        - pattern: flask.request.get_json()
        - pattern: flask.request.view_args.get(...)
        - pattern: flask.request.view_args[...]
    - patterns:
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n"
      - focus-metavariable: $ROUTEVAR
  severity: ERROR
- id: os-system-injection
  languages:
  - python
  message: User data detected in os.system. This could be vulnerable to a command
    injection and should be avoided. If this must be done, use the 'subprocess' module
    instead and pass the arguments as a list.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - patterns:
    - pattern: os.system(...)
    - pattern-either:
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  os.system(..., <... $ROUTEVAR ...>, ...)\n"
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  os.system(..., <... $INTERM\
          \ ...>, ...)\n"
  - pattern: os.system(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: os.system(..., <... flask.request.$W[...] ...>, ...)
  - pattern: os.system(..., <... flask.request.$W(...) ...>, ...)
  - pattern: os.system(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W.get(...) ...>\n...\nos.system(<...\
        \ $INTERM ...>)\n"
    - pattern: os.system(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W[...] ...>\n...\nos.system(<...\
        \ $INTERM ...>)\n"
    - pattern: os.system(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W(...) ...>\n...\nos.system(<...\
        \ $INTERM ...>)\n"
    - pattern: os.system(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W ...>\n...\nos.system(<... $INTERM\
        \ ...>)\n"
    - pattern: os.system(...)
  severity: ERROR
- id: csv-writer-injection
  languages:
  - python
  message: Detected user input into a generated CSV file using the built-in `csv`
    module. If user data is used to generate the data in this file, it is possible
    that an attacker could inject a formula when the CSV is imported into a spreadsheet
    application that runs an attacker script, which could steal data from the importing
    user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in
    replacement with the same API that will attempt to mitigate formula injection
    attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-1236: Improper Neutralization of Formula Elements in a CSV File'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/raphaelm/defusedcsv
    - https://owasp.org/www-community/attacks/CSV_Injection
    - https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities
    subcategory:
    - vuln
    technology:
    - python
    - flask
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-inside: "$WRITER = csv.writer(...)\n\n...\n\n$WRITER.$WRITE(...)\n"
    - pattern: $WRITER.$WRITE(...)
    - metavariable-regex:
        metavariable: $WRITE
        regex: ^(writerow|writerows|writeheader)$
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
      - patterns:
        - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
            \  ...\n"
        - focus-metavariable: $ROUTEVAR
  severity: ERROR
- id: path-traversal-open
  languages:
  - python
  message: Found request data in a call to 'open'. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path\
      \ Traversal')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    subcategory:
    - audit
    technology:
    - flask
  pattern-either:
  - patterns:
    - pattern: open(...)
    - pattern-either:
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  open(..., <... $ROUTEVAR ...>, ...)\n"
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  with open(..., <... $ROUTEVAR ...>, ...) as $FD:\n    ...\n"
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  open(..., <... $INTERM\
          \ ...>, ...)\n"
  - pattern: open(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: open(..., <... flask.request.$W[...] ...>, ...)
  - pattern: open(..., <... flask.request.$W(...) ...>, ...)
  - pattern: open(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W.get(...) ...>\n...\nopen(<...\
        \ $INTERM ...>, ...)\n"
    - pattern: open(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W[...] ...>\n...\nopen(<... $INTERM\
        \ ...>, ...)\n"
    - pattern: open(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W(...) ...>\n...\nopen(<... $INTERM\
        \ ...>, ...)\n"
    - pattern: open(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W ...>\n...\nopen(<... $INTERM\
        \ ...>, ...)\n"
    - pattern: open(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W.get(...) ...>\n...\nwith open(<...\
        \ $INTERM ...>, ...) as $F:\n  ...\n"
    - pattern: open(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W[...] ...>\n...\nwith open(<...\
        \ $INTERM ...>, ...) as $F:\n  ...\n"
    - pattern: open(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W(...) ...>\n...\nwith open(<...\
        \ $INTERM ...>, ...) as $F:\n  ...\n"
    - pattern: open(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W ...>\n...\nwith open(<... $INTERM\
        \ ...>, ...) as $F:\n  ...\n"
    - pattern: open(...)
  severity: ERROR
- id: exec-injection
  languages:
  - python
  message: Detected user data flowing into exec. This is code injection and should
    be avoided.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: HIGH
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html
    subcategory:
    - vuln
    technology:
    - flask
  pattern-either:
  - patterns:
    - pattern: exec(...)
    - pattern-either:
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  exec(..., <... $ROUTEVAR ...>, ...)\n"
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  exec(..., <... $INTERM\
          \ ...>, ...)\n"
  - pattern: exec(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: exec(..., <... flask.request.$W[...] ...>, ...)
  - pattern: exec(..., <... flask.request.$W(...) ...>, ...)
  - pattern: exec(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W.get(...) ...>\n...\nexec(...,\
        \ <... $INTERM ...>, ...)\n"
    - pattern: exec(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W[...] ...>\n...\nexec(..., <...\
        \ $INTERM ...>, ...)\n"
    - pattern: exec(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W(...) ...>\n...\nexec(..., <...\
        \ $INTERM ...>, ...)\n"
    - pattern: exec(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W ...>\n...\nexec(..., <... $INTERM\
        \ ...>, ...)\n"
    - pattern: exec(...)
  severity: ERROR
- id: tainted-sql-string
  languages:
  - python
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as SQLAlchemy which will protect your queries.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql
    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column
    subcategory:
    - vuln
    technology:
    - sqlalchemy
    - flask
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "\"$SQLSTR\" + ...\n"
      - pattern: "\"$SQLSTR\" % ...\n"
      - pattern: "\"$SQLSTR\".format(...)\n"
      - pattern: "f\"$SQLSTR{...}...\"\n"
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: flask.request.$ANYTHING
      - patterns:
        - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
        - pattern: $ROUTEVAR
  severity: ERROR
- id: eval-injection
  languages:
  - python
  message: Detected user data flowing into eval. This is code injection and should
    be avoided.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code\
      \ ('Eval Injection')"
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
    subcategory:
    - vuln
    technology:
    - flask
  pattern-either:
  - patterns:
    - pattern: eval(...)
    - pattern-either:
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  eval(..., <... $ROUTEVAR ...>, ...)\n"
      - pattern-inside: "@$APP.route($ROUTE, ...)\ndef $FUNC(..., $ROUTEVAR, ...):\n\
          \  ...\n  $INTERM = <... $ROUTEVAR ...>\n  ...\n  eval(..., <... $INTERM\
          \ ...>, ...)\n"
  - pattern: eval(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: eval(..., <... flask.request.$W[...] ...>, ...)
  - pattern: eval(..., <... flask.request.$W(...) ...>, ...)
  - pattern: eval(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W.get(...) ...>\n...\neval(...,\
        \ <... $INTERM ...>, ...)\n"
    - pattern: eval(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W[...] ...>\n...\neval(..., <...\
        \ $INTERM ...>, ...)\n"
    - pattern: eval(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W(...) ...>\n...\neval(..., <...\
        \ $INTERM ...>, ...)\n"
    - pattern: eval(...)
  - patterns:
    - pattern-inside: "$INTERM = <... flask.request.$W ...>\n...\neval(..., <... $INTERM\
        \ ...>, ...)\n"
    - pattern: eval(...)
  severity: ERROR
- id: nan-injection
  languages:
  - python
  message: Found user input going directly into typecast for bool(), float(), or complex().
    This allows an attacker to inject Python's not-a-number (NaN) into the typecast.
    This results in undefind behavior, particularly when doing comparisons. Either
    cast to a different type, or add a guard checking for all capitalizations of the
    string 'nan'.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    impact: MEDIUM
    likelihood: MEDIUM
    references:
    - https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868
    - https://blog.bitdiscovery.com/2021/12/python-nan-injection/
    subcategory:
    - vuln
    technology:
    - flask
  mode: taint
  pattern-sanitizers:
  - not_conflicting: true
    pattern: $ANYTHING(...)
  pattern-sinks:
  - pattern-either:
    - pattern: float(...)
    - pattern: bool(...)
    - pattern: complex(...)
  pattern-sources:
  - pattern-either:
    - pattern: flask.request.$SOMETHING.get(...)
    - pattern: flask.request.$SOMETHING[...]
    - patterns:
      - pattern-inside: "@$APP.route(...)\ndef $FUNC(..., $ROUTEVAR, ...):\n  ...\n"
      - pattern: $ROUTEVAR
  severity: ERROR
- fix: "flask.jsonify($...VAR)\n"
  id: use-jsonify
  languages:
  - python
  message: flask.jsonify() is a Flask helper method which handles the correct  settings
    for returning JSON from Flask routes
  metadata:
    category: best-practice
    references:
    - https://flask.palletsprojects.com/en/2.2.x/api/#flask.json.jsonify
    technology:
    - flask
  patterns:
  - pattern: $JSONDUMPS
  - pattern-either:
    - pattern-inside: "return json.dumps($...VAR)\n"
    - pattern-inside: "$DATA = json.dumps($...VAR)\n...\nreturn $DATA\n"
  - pattern-inside: "@app.route(...)\ndef $X():\n  ...\n"
  - metavariable-pattern:
      metavariable: $JSONDUMPS
      pattern: json.dumps($...VAR)
  - focus-metavariable: $JSONDUMPS
  severity: ERROR
- id: avoid-accessing-request-in-wrong-handler
  languages:
  - python
  message: Accessing request object inside a route handle for HTTP GET command will
    throw due to missing request body.
  metadata:
    category: correctness
    technology:
    - flask
  patterns:
  - pattern-inside: "@app.route(..., method=\"GET\")\ndef $X(...):\n  ...\n"
  - pattern-either:
    - pattern: "$Y = flask.request.json\n"
    - pattern: "$Y = flask.request.form\n"
    - pattern: "$Y = flask.request.data\n"
  severity: WARNING
- id: flask-cache-query-string
  languages:
  - python
  message: Flask-caching doesn't cache query strings by default. You have to use `query_string=True`.
    Also you shouldn't cache verbs that can mutate state.
  metadata:
    category: caching
    technology:
    - flask
  patterns:
  - pattern-either:
    - pattern: "@app.route(\"...\")\n@cache.cached(...)\ndef $HANDLER(...):\n  ...\n\
        \  request.args.get(...)\n"
    - pattern: "@app.route(\"...\", methods=[..., \"POST\", ...])\n@cache.cached(...)\n\
        def $HANDLER(...):\n  ...\n"
    - pattern: "@app.route(\"...\", methods=[..., \"PUT\", ...])\n@cache.cached(...)\n\
        def $HANDLER(...):\n  ...\n"
    - pattern: "@app.route(\"...\", methods=[..., \"DELETE\", ...])\n@cache.cached(...)\n\
        def $HANDLER(...):\n  ...\n"
    - pattern: "@app.route(\"...\", methods=[..., \"PATCH\", ...])\n@cache.cached(...)\n\
        def $HANDLER(...):\n  ...\n"
  - pattern-not: "@app.route(\"...\")\n@cache.cached(..., query_string=True)\ndef\
      \ $HANDLER(...):\n  ...\n  request.args.get(...)\n"
  severity: WARNING
- id: formatted-string-bashoperator
  languages:
  - python
  message: 'Found a formatted string in BashOperator: $CMD. This could be vulnerable
    to injection. Be extra sure your variables are not controllable by external sources.'
  metadata:
    category: security
    confidence: LOW
    cwe:
    - "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS\
      \ Command Injection')"
    cwe2021-top25: true
    cwe2022-top25: true
    impact: HIGH
    likelihood: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    technology:
    - airflow
  pattern-either:
  - pattern: "airflow.operators.bash_operator.BashOperator(..., bash_command=\"...\"\
      \ + $CONCAT, ...)\n"
  - pattern: "airflow.operators.bash_operator.BashOperator(..., bash_command=\"...\"\
      .format(...), ...)\n"
  - pattern: "airflow.operators.bash_operator.BashOperator(..., bash_command=f\"...\"\
      , ...)\n"
  - pattern: "airflow.operators.bash_operator.BashOperator(..., bash_command=\"...\"\
      \ % $PARAMS, ...)\n"
  - pattern: "$CMD = \"...\" % $PARAMS\n...\nairflow.operators.bash_operator.BashOperator(...,\
      \ bash_command=$CMD, ...)\n"
  - pattern: "$CMD = $STR.format(...)\n...\nairflow.operators.bash_operator.BashOperator(...,\
      \ bash_command=$CMD, ...)\n"
  - pattern: "$CMD = f\"...\"\n...\nairflow.operators.bash_operator.BashOperator(...,\
      \ bash_command=$CMD, ...)\n"
  - pattern: "$CMD = \"...\" + $CONCAT\n...\nairflow.operators.bash_operator.BashOperator(...,\
      \ bash_command=$CMD, ...)\n"
  - pattern: "$CMD = \"...\"\n...\n$CMD += $CONCAT\n...\nairflow.operators.bash_operator.BashOperator(...,\
      \ bash_command=$CMD, ...)\n"
  severity: ERROR
- id: insecure-hash-algorithm-md5
  languages:
  - python
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    bandit-code: B303
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    subcategory:
    - vuln
    technology:
    - cryptography
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  severity: WARNING
- id: insecure-cipher-mode-ecb
  languages:
  - python
  message: Detected ECB cipher mode which is considered insecure. The algorithm can
    potentially leak information about the plaintext. Use CBC mode instead.
  metadata:
    bandit-code: B305
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: LOW
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101
    subcategory:
    - audit
    technology:
    - cryptography
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  severity: WARNING
- id: insecure-cipher-algorithm-blowfish
  languages:
  - python
  message: Detected Blowfish cipher algorithm which is considered insecure. The algorithm
    is considered weak and has been deprecated. Use AES instead.
  metadata:
    bandit-code: B304
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/html/rfc5469
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98
    subcategory:
    - vuln
    technology:
    - cryptography
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  severity: WARNING
- id: insecure-cipher-algorithm-arc4
  languages:
  - python
  message: Detected ARC4 cipher algorithm which is considered insecure. The algorithm
    is considered weak and has been deprecated. Use AES instead.
  metadata:
    bandit-code: B304
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: MEDIUM
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/html/rfc5469
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98
    subcategory:
    - vuln
    technology:
    - cryptography
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  severity: WARNING
- id: empty-aes-key
  languages:
  - python
  message: Potential empty AES encryption key. Using an empty key in AES encryption
    can result in weak encryption and may allow attackers to easily decrypt sensitive
    data. Ensure that a strong, non-empty key is used for AES encryption.
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    - 'CWE-310: Cryptographic Issues'
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    likelihood: MEDIUM
    owasp: A6:2017 misconfiguration
    references:
    - https://cwe.mitre.org/data/definitions/327.html
    - https://cwe.mitre.org/data/definitions/310.html
    subcategory:
    - vuln
    technology:
    - python
  patterns:
  - pattern: AES.new("",...)
  severity: WARNING
- id: crypto-mode-without-authentication
  languages:
  - python
  message: 'An encryption mode of operation is being used without proper message authentication.
    This can potentially result in the encrypted content to be decrypted by an attacker.
    Consider instead use an AEAD mode of operation like GCM. '
  metadata:
    category: security
    confidence: MEDIUM
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    impact: MEDIUM
    likelihood: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    technology:
    - cryptography
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "Cipher(..., $HAZMAT_MODE(...),...)\n"
      - pattern-not-inside: "Cipher(..., $HAZMAT_MODE(...),...)\n...\nHMAC(...)\n"
      - pattern-not-inside: "Cipher(..., $HAZMAT_MODE(...),...)\n...\nhmac.HMAC(...)\n"
  - metavariable-pattern:
      metavariable: $HAZMAT_MODE
      patterns:
      - pattern-either:
        - pattern: modes.CTR
        - pattern: modes.CBC
        - pattern: modes.CFB
        - pattern: modes.OFB
  severity: ERROR
